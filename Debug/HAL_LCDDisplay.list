
HAL_LCDDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002104  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002298  08002298  00012298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022dc  080022dc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022e4  080022e4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022e4  080022e4  000122e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022e8  080022e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080022ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000001c  08002308  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08002308  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000040bc  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012b1  00000000  00000000  0002414b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004b8  00000000  00000000  00025400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000361  00000000  00000000  000258b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014706  00000000  00000000  00025c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005b0e  00000000  00000000  0003a31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e87c  00000000  00000000  0003fe2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010cc  00000000  00000000  000be6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000bf778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002280 	.word	0x08002280

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08002280 	.word	0x08002280

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <strub>:
#include "LCD_Lib.h"

uint16_t LCD_bus[8] = {D7_PIN, D6_PIN, D5_PIN, D4_PIN, D3_PIN, D2_PIN, D1_PIN, D0_PIN};

void strub()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); //state of pin MUST BE INVERSE
 80004d4:	2201      	movs	r2, #1
 80004d6:	2120      	movs	r1, #32
 80004d8:	4807      	ldr	r0, [pc, #28]	; (80004f8 <strub+0x28>)
 80004da:	f001 f9e1 	bl	80018a0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80004de:	200a      	movs	r0, #10
 80004e0:	f000 ff24 	bl	800132c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //state of pin MUST BE INVERSE
 80004e4:	2200      	movs	r2, #0
 80004e6:	2120      	movs	r1, #32
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <strub+0x28>)
 80004ea:	f001 f9d9 	bl	80018a0 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 80004ee:	201e      	movs	r0, #30
 80004f0:	f000 ff1c 	bl	800132c <HAL_Delay>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40020400 	.word	0x40020400

080004fc <sendBite>:

void sendBite(uint8_t bite)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MANAGE_PORT, RS, 0); //state of pin MUST BE INVERSE
 8000506:	2200      	movs	r2, #0
 8000508:	2108      	movs	r1, #8
 800050a:	4811      	ldr	r0, [pc, #68]	; (8000550 <sendBite+0x54>)
 800050c:	f001 f9c8 	bl	80018a0 <HAL_GPIO_WritePin>

	for(uint8_t count = 0; count < NUM_BIT; count++)
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]
 8000514:	e012      	b.n	800053c <sendBite+0x40>
	{
		HAL_GPIO_WritePin(DATA_PORT, LCD_bus[count], (0b10000000 & (bite << count)));
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <sendBite+0x58>)
 800051a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800051e:	79fa      	ldrb	r2, [r7, #7]
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
 8000526:	b2db      	uxtb	r3, r3
 8000528:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <sendBite+0x5c>)
 8000532:	f001 f9b5 	bl	80018a0 <HAL_GPIO_WritePin>
	for(uint8_t count = 0; count < NUM_BIT; count++)
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	3301      	adds	r3, #1
 800053a:	73fb      	strb	r3, [r7, #15]
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	2b07      	cmp	r3, #7
 8000540:	d9e9      	bls.n	8000516 <sendBite+0x1a>
	}

	strub();
 8000542:	f7ff ffc5 	bl	80004d0 <strub>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40020400 	.word	0x40020400
 8000554:	20000000 	.word	0x20000000
 8000558:	40020000 	.word	0x40020000

0800055c <sendData>:

void sendData(uint8_t data)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MANAGE_PORT, RS, 1); //state of pin MUST BE INVERSE
 8000566:	2201      	movs	r2, #1
 8000568:	2108      	movs	r1, #8
 800056a:	4811      	ldr	r0, [pc, #68]	; (80005b0 <sendData+0x54>)
 800056c:	f001 f998 	bl	80018a0 <HAL_GPIO_WritePin>

	for(uint8_t count = 0; count < NUM_BIT; count++)
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	e012      	b.n	800059c <sendData+0x40>
	{
		HAL_GPIO_WritePin(DATA_PORT, LCD_bus[count], (0b10000000 & (data << count)));
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <sendData+0x58>)
 800057a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800057e:	79fa      	ldrb	r2, [r7, #7]
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	fa02 f303 	lsl.w	r3, r2, r3
 8000586:	b2db      	uxtb	r3, r3
 8000588:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800058c:	b2db      	uxtb	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <sendData+0x5c>)
 8000592:	f001 f985 	bl	80018a0 <HAL_GPIO_WritePin>
	for(uint8_t count = 0; count < NUM_BIT; count++)
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	3301      	adds	r3, #1
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	2b07      	cmp	r3, #7
 80005a0:	d9e9      	bls.n	8000576 <sendData+0x1a>
	}

	strub();
 80005a2:	f7ff ff95 	bl	80004d0 <strub>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020400 	.word	0x40020400
 80005b4:	20000000 	.word	0x20000000
 80005b8:	40020000 	.word	0x40020000

080005bc <sendText>:

void sendText(uint8_t *text)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
//	uint8_t count = 0;

	while(*text != '\0')
 80005c4:	e007      	b.n	80005d6 <sendText+0x1a>
	{
		sendData(*text);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ffc6 	bl	800055c <sendData>

		*text++;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
	while(*text != '\0')
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f3      	bne.n	80005c6 <sendText+0xa>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <setDDRAM>:

void setDDRAM(uint8_t DDRAM)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	sendBite(SET_DDRAM | DDRAM);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff7e 	bl	80004fc <sendBite>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <clearDisplay>:

void clearDisplay()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	sendBite(0x01);
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff ff75 	bl	80004fc <sendBite>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}

08000616 <displayControl>:

displayControl(uint8_t display_seting)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	71fb      	strb	r3, [r7, #7]
	sendBite(0x08 | display_seting);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	f043 0308 	orr.w	r3, r3, #8
 8000626:	b2db      	uxtb	r3, r3
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff67 	bl	80004fc <sendBite>
//	sendBite(0b00001100);
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <init_8bit_interface>:

void init_8bit_interface()
{/*
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
	sendBite(0x01);
	HAL_Delay(2);
*/
/*############################*/

	HAL_Delay(50);
 800063a:	2032      	movs	r0, #50	; 0x32
 800063c:	f000 fe76 	bl	800132c <HAL_Delay>
	sendBite(0x30);
 8000640:	2030      	movs	r0, #48	; 0x30
 8000642:	f7ff ff5b 	bl	80004fc <sendBite>
	HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fe70 	bl	800132c <HAL_Delay>
	sendBite(0x30);
 800064c:	2030      	movs	r0, #48	; 0x30
 800064e:	f7ff ff55 	bl	80004fc <sendBite>
	HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f000 fe6a 	bl	800132c <HAL_Delay>
	sendBite(0x08);
 8000658:	2008      	movs	r0, #8
 800065a:	f7ff ff4f 	bl	80004fc <sendBite>
	HAL_Delay(1);
 800065e:	2001      	movs	r0, #1
 8000660:	f000 fe64 	bl	800132c <HAL_Delay>
	sendBite(0x01);
 8000664:	2001      	movs	r0, #1
 8000666:	f7ff ff49 	bl	80004fc <sendBite>
	HAL_Delay(2);
 800066a:	2002      	movs	r0, #2
 800066c:	f000 fe5e 	bl	800132c <HAL_Delay>
	sendBite(0x04);
 8000670:	2004      	movs	r0, #4
 8000672:	f7ff ff43 	bl	80004fc <sendBite>

	sendBite(0x38);
 8000676:	2038      	movs	r0, #56	; 0x38
 8000678:	f7ff ff40 	bl	80004fc <sendBite>
	HAL_Delay(5);
 800067c:	2005      	movs	r0, #5
 800067e:	f000 fe55 	bl	800132c <HAL_Delay>
	sendBite(0x06);
 8000682:	2006      	movs	r0, #6
 8000684:	f7ff ff3a 	bl	80004fc <sendBite>
	HAL_Delay(5);
 8000688:	2005      	movs	r0, #5
 800068a:	f000 fe4f 	bl	800132c <HAL_Delay>
	sendBite(0x10);
 800068e:	2010      	movs	r0, #16
 8000690:	f7ff ff34 	bl	80004fc <sendBite>
	HAL_Delay(5);
 8000694:	2005      	movs	r0, #5
 8000696:	f000 fe49 	bl	800132c <HAL_Delay>
	sendBite(0x0F);
 800069a:	200f      	movs	r0, #15
 800069c:	f7ff ff2e 	bl	80004fc <sendBite>
	HAL_Delay(5);
 80006a0:	2005      	movs	r0, #5
 80006a2:	f000 fe43 	bl	800132c <HAL_Delay>
	sendBite(0x02);
 80006a6:	2002      	movs	r0, #2
 80006a8:	f7ff ff28 	bl	80004fc <sendBite>
	HAL_Delay(5);
 80006ac:	2005      	movs	r0, #5
 80006ae:	f000 fe3d 	bl	800132c <HAL_Delay>


}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fdc2 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 fb04 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 fb6e 	bl	8000da8 <MX_GPIO_Init>
  /* USER CODE BEGIN WHILE */
//  HAL_GPIO_WritePin(MANAGE_PORT, RW, 1);
//  HAL_GPIO_WritePin(MANAGE_PORT, RS, 1);

//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);//because pin is invert
  init_8bit_interface();
 80006cc:	f7ff ffb3 	bl	8000636 <init_8bit_interface>
  displayControl(CURSOR_BLINK_OFF & CURSOR_OFF);
 80006d0:	2004      	movs	r0, #4
 80006d2:	f7ff ffa0 	bl	8000616 <displayControl>
  HAL_Delay(10);
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 fe28 	bl	800132c <HAL_Delay>
  struct MenuItem MainMenu, led[4], subLed0[2],
                                    subLed1[2],
									subLed2[2],
									subLed3[3];

  	  MainMenu.name[10] = " ";
 80006dc:	4be3      	ldr	r3, [pc, #908]	; (8000a6c <main+0x3b4>)
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
  	  MainMenu.text[10] = " ";
 80006e4:	4be1      	ldr	r3, [pc, #900]	; (8000a6c <main+0x3b4>)
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f887 321c 	strb.w	r3, [r7, #540]	; 0x21c
  	  MainMenu.ddram_name = NULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f887 321c 	strb.w	r3, [r7, #540]	; 0x21c
  	  MainMenu.ddram_text = NULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d
  	  MainMenu.subItem = led;
 80006f8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80006fc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
  	  MainMenu.parentalItem = NULL;
 8000700:	2300      	movs	r3, #0
 8000702:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  	  MainMenu.navigation_list = NULL;
 8000706:	2300      	movs	r3, #0
 8000708:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  	  MainMenu.writeFunction = writeMainMenu;
 800070c:	4bd8      	ldr	r3, [pc, #864]	; (8000a70 <main+0x3b8>)
 800070e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c

  		  strcpy(led[0].name, " Ld1: ");
 8000712:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000716:	4ad7      	ldr	r2, [pc, #860]	; (8000a74 <main+0x3bc>)
 8000718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800071c:	6018      	str	r0, [r3, #0]
 800071e:	3304      	adds	r3, #4
 8000720:	8019      	strh	r1, [r3, #0]
 8000722:	3302      	adds	r3, #2
 8000724:	0c0a      	lsrs	r2, r1, #16
 8000726:	701a      	strb	r2, [r3, #0]
  		  led[0].text[10] = " ";
 8000728:	4bd0      	ldr	r3, [pc, #832]	; (8000a6c <main+0x3b4>)
 800072a:	b2db      	uxtb	r3, r3
 800072c:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  		  led[0].ddram_name = 0x00;
 8000730:	2300      	movs	r3, #0
 8000732:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
  		  led[0].ddram_text = NULL;
 8000736:	2300      	movs	r3, #0
 8000738:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
  		  led[0].state_item = CHOOSED_LED;
 800073c:	2305      	movs	r3, #5
 800073e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
  		  led[0].subItem = &subLed0[0];
 8000742:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000746:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  		  led[0].parentalItem = NULL;
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  		  led[0].navigation_list = &led[1];
 8000750:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000754:	3328      	adds	r3, #40	; 0x28
 8000756:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  		  led[0].writeFunction = writeSubLedMenu;
 800075a:	4bc7      	ldr	r3, [pc, #796]	; (8000a78 <main+0x3c0>)
 800075c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

  			  strcpy(subLed0[0].name, " SET");
 8000760:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000764:	4ac5      	ldr	r2, [pc, #788]	; (8000a7c <main+0x3c4>)
 8000766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800076a:	6018      	str	r0, [r3, #0]
 800076c:	3304      	adds	r3, #4
 800076e:	7019      	strb	r1, [r3, #0]
  			  strcpy(subLed0[0].text, led[0].name);
 8000770:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8000774:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000778:	330a      	adds	r3, #10
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fd77 	bl	8002270 <strcpy>
  			  subLed0[0].ddram_name = 0x40;
 8000782:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000786:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800078a:	2240      	movs	r2, #64	; 0x40
 800078c:	751a      	strb	r2, [r3, #20]
  			  subLed0[0].ddram_text = 0x00;
 800078e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000792:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000796:	2200      	movs	r2, #0
 8000798:	755a      	strb	r2, [r3, #21]
  			  subLed0[0].state_item = SET_V;
 800079a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800079e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80007a2:	2204      	movs	r2, #4
 80007a4:	759a      	strb	r2, [r3, #22]
  			  subLed0[0].subItem = NULL;
 80007a6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80007aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  			  subLed0[0].parentalItem = &MainMenu;
 80007b2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80007b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80007ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80007be:	61da      	str	r2, [r3, #28]
  			  subLed0[0].navigation_list = &subLed0[1];
 80007c0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80007c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80007c8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80007cc:	3228      	adds	r2, #40	; 0x28
 80007ce:	621a      	str	r2, [r3, #32]


  			  strcpy(subLed0[1].name, " BACK");
 80007d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007d4:	3328      	adds	r3, #40	; 0x28
 80007d6:	4aaa      	ldr	r2, [pc, #680]	; (8000a80 <main+0x3c8>)
 80007d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007dc:	6018      	str	r0, [r3, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	8019      	strh	r1, [r3, #0]
  			  strcpy(subLed0[1].text, led[0].name);
 80007e2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80007e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007ea:	3332      	adds	r3, #50	; 0x32
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fd3e 	bl	8002270 <strcpy>
  			  subLed0[1].ddram_name = 0x48;
 80007f4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80007f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80007fc:	2248      	movs	r2, #72	; 0x48
 80007fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  			  subLed0[1].ddram_text = 0x00;
 8000802:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000806:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800080a:	2200      	movs	r2, #0
 800080c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  			  subLed0[1].state_item = BACK;
 8000810:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000814:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000818:	2203      	movs	r2, #3
 800081a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  			  subLed0[1].subItem = NULL;
 800081e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000822:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000826:	2200      	movs	r2, #0
 8000828:	641a      	str	r2, [r3, #64]	; 0x40
  			  subLed0[1].parentalItem = &MainMenu;
 800082a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800082e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000832:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000836:	645a      	str	r2, [r3, #68]	; 0x44
  			  subLed0[1].navigation_list = &subLed0[0];
 8000838:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800083c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000840:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000844:	649a      	str	r2, [r3, #72]	; 0x48




  		  strcpy(led[1].name, " Ld2: ");
 8000846:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800084a:	3328      	adds	r3, #40	; 0x28
 800084c:	4a8d      	ldr	r2, [pc, #564]	; (8000a84 <main+0x3cc>)
 800084e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000852:	6018      	str	r0, [r3, #0]
 8000854:	3304      	adds	r3, #4
 8000856:	8019      	strh	r1, [r3, #0]
 8000858:	3302      	adds	r3, #2
 800085a:	0c0a      	lsrs	r2, r1, #16
 800085c:	701a      	strb	r2, [r3, #0]
  		  led[1].text[10] = " ";
 800085e:	4b83      	ldr	r3, [pc, #524]	; (8000a6c <main+0x3b4>)
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f887 31a4 	strb.w	r3, [r7, #420]	; 0x1a4
  		  led[1].ddram_name = 0x08;
 8000866:	2308      	movs	r3, #8
 8000868:	f887 31a4 	strb.w	r3, [r7, #420]	; 0x1a4
  		  led[1].ddram_text = NULL;
 800086c:	2300      	movs	r3, #0
 800086e:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
  		  led[1].state_item = CHOOSED_LED;
 8000872:	2305      	movs	r3, #5
 8000874:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
  		  led[1].subItem = &subLed1[0];
 8000878:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800087c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  		  led[1].parentalItem = &MainMenu;
 8000880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000884:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  		  led[1].navigation_list = &led[2];
 8000888:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800088c:	3350      	adds	r3, #80	; 0x50
 800088e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  		  led[1].writeFunction = writeSubLedMenu;
 8000892:	4b79      	ldr	r3, [pc, #484]	; (8000a78 <main+0x3c0>)
 8000894:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

  			  strcpy(subLed1[0].name, " SET");
 8000898:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800089c:	4a77      	ldr	r2, [pc, #476]	; (8000a7c <main+0x3c4>)
 800089e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a2:	6018      	str	r0, [r3, #0]
 80008a4:	3304      	adds	r3, #4
 80008a6:	7019      	strb	r1, [r3, #0]
  			  strcpy(subLed1[0].text, led[1].name);
 80008a8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80008ac:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80008b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80008b4:	330a      	adds	r3, #10
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fcd9 	bl	8002270 <strcpy>
  			  subLed1[0].ddram_name = 0x40;
 80008be:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80008c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80008c6:	2240      	movs	r2, #64	; 0x40
 80008c8:	751a      	strb	r2, [r3, #20]
  			  subLed1[0].ddram_text = 0x00;
 80008ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80008ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80008d2:	2200      	movs	r2, #0
 80008d4:	755a      	strb	r2, [r3, #21]
  			  subLed1[0].state_item = SET_V;
 80008d6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80008da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80008de:	2204      	movs	r2, #4
 80008e0:	759a      	strb	r2, [r3, #22]
  			  subLed1[0].subItem = NULL;
 80008e2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80008e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  			  subLed1[0].parentalItem = &MainMenu;
 80008ee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80008f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80008f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80008fa:	61da      	str	r2, [r3, #28]
  			  subLed1[0].navigation_list = &subLed1[1];
 80008fc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000900:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000904:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000908:	3228      	adds	r2, #40	; 0x28
 800090a:	621a      	str	r2, [r3, #32]


  			  strcpy(subLed1[1].name, " BACK");
 800090c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000910:	3328      	adds	r3, #40	; 0x28
 8000912:	4a5b      	ldr	r2, [pc, #364]	; (8000a80 <main+0x3c8>)
 8000914:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000918:	6018      	str	r0, [r3, #0]
 800091a:	3304      	adds	r3, #4
 800091c:	8019      	strh	r1, [r3, #0]
  			  strcpy(subLed1[1].text, led[1].name);
 800091e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000922:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000926:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800092a:	3332      	adds	r3, #50	; 0x32
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fc9e 	bl	8002270 <strcpy>
  			  subLed1[1].ddram_name = 0x48;
 8000934:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000938:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800093c:	2248      	movs	r2, #72	; 0x48
 800093e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  			  subLed1[1].ddram_text = 0x00;
 8000942:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000946:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800094a:	2200      	movs	r2, #0
 800094c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  			  subLed1[1].state_item = BACK;
 8000950:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000954:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000958:	2203      	movs	r2, #3
 800095a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  			  subLed1[1].subItem = NULL;
 800095e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000962:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000966:	2200      	movs	r2, #0
 8000968:	641a      	str	r2, [r3, #64]	; 0x40
  			  subLed1[1].parentalItem = &MainMenu;
 800096a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800096e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000972:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000976:	645a      	str	r2, [r3, #68]	; 0x44
  			  subLed1[1].navigation_list = &subLed1[0];
 8000978:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800097c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8000980:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000984:	649a      	str	r2, [r3, #72]	; 0x48




  		  strcpy(led[2].name, " Ld3: ");
 8000986:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800098a:	3350      	adds	r3, #80	; 0x50
 800098c:	4a3e      	ldr	r2, [pc, #248]	; (8000a88 <main+0x3d0>)
 800098e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000992:	6018      	str	r0, [r3, #0]
 8000994:	3304      	adds	r3, #4
 8000996:	8019      	strh	r1, [r3, #0]
 8000998:	3302      	adds	r3, #2
 800099a:	0c0a      	lsrs	r2, r1, #16
 800099c:	701a      	strb	r2, [r3, #0]
  		  led[2].text[10] = " ";
 800099e:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <main+0x3b4>)
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	f887 31cc 	strb.w	r3, [r7, #460]	; 0x1cc
  		  led[2].ddram_name = 0x40;
 80009a6:	2340      	movs	r3, #64	; 0x40
 80009a8:	f887 31cc 	strb.w	r3, [r7, #460]	; 0x1cc
  		  led[2].ddram_text = NULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f887 31cd 	strb.w	r3, [r7, #461]	; 0x1cd
  		  led[2].state_item = CHOOSED_LED;
 80009b2:	2305      	movs	r3, #5
 80009b4:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
  		  led[2].subItem = &subLed2[0];
 80009b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  		  led[2].parentalItem = &MainMenu;
 80009c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80009c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  		  led[2].navigation_list = &led[3];
 80009c8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80009cc:	3378      	adds	r3, #120	; 0x78
 80009ce:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
  		  led[2].writeFunction = writeSubLedMenu;
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <main+0x3c0>)
 80009d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

  			  strcpy(subLed2[0].name, " SET");
 80009d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009dc:	4a27      	ldr	r2, [pc, #156]	; (8000a7c <main+0x3c4>)
 80009de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e2:	6018      	str	r0, [r3, #0]
 80009e4:	3304      	adds	r3, #4
 80009e6:	7019      	strb	r1, [r3, #0]
  			  strcpy(subLed2[0].text, led[2].name);
 80009e8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80009ec:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80009f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80009f4:	330a      	adds	r3, #10
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fc39 	bl	8002270 <strcpy>
  			  subLed2[0].ddram_name = 0x40;
 80009fe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000a02:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000a06:	2240      	movs	r2, #64	; 0x40
 8000a08:	751a      	strb	r2, [r3, #20]
  			  subLed2[0].ddram_text = 0x00;
 8000a0a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000a0e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000a12:	2200      	movs	r2, #0
 8000a14:	755a      	strb	r2, [r3, #21]
  		      subLed2[0].state_item = SET_V;
 8000a16:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000a1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000a1e:	2204      	movs	r2, #4
 8000a20:	759a      	strb	r2, [r3, #22]
  			  subLed2[0].subItem = NULL;
 8000a22:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000a26:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  			  subLed2[0].parentalItem = &MainMenu;
 8000a2e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000a32:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000a36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000a3a:	61da      	str	r2, [r3, #28]
  			  subLed2[0].navigation_list = &subLed3[1];
 8000a3c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000a40:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000a44:	463a      	mov	r2, r7
 8000a46:	3228      	adds	r2, #40	; 0x28
 8000a48:	621a      	str	r2, [r3, #32]


  			  strcpy(subLed2[1].name, " BACK");
 8000a4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a4e:	3328      	adds	r3, #40	; 0x28
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <main+0x3c8>)
 8000a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	8019      	strh	r1, [r3, #0]
  			  strcpy(subLed2[1].text, led[2].name);
 8000a5c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000a60:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000a64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a68:	3332      	adds	r3, #50	; 0x32
 8000a6a:	e00f      	b.n	8000a8c <main+0x3d4>
 8000a6c:	08002298 	.word	0x08002298
 8000a70:	08000f79 	.word	0x08000f79
 8000a74:	0800229c 	.word	0x0800229c
 8000a78:	08000fd1 	.word	0x08000fd1
 8000a7c:	080022a4 	.word	0x080022a4
 8000a80:	080022ac 	.word	0x080022ac
 8000a84:	080022b4 	.word	0x080022b4
 8000a88:	080022bc 	.word	0x080022bc
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fbee 	bl	8002270 <strcpy>
  			  subLed2[1].ddram_name = 0x48;
 8000a94:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000a98:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000a9c:	2248      	movs	r2, #72	; 0x48
 8000a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  			  subLed2[1].ddram_text = 0x00;
 8000aa2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000aa6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  			  subLed2[1].state_item = BACK;
 8000ab0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000ab4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000ab8:	2203      	movs	r2, #3
 8000aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  			  subLed2[1].subItem = NULL;
 8000abe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000ac2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	641a      	str	r2, [r3, #64]	; 0x40
  			  subLed2[1].parentalItem = &MainMenu;
 8000aca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000ace:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000ad2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000ad6:	645a      	str	r2, [r3, #68]	; 0x44
  			  subLed2[1].navigation_list = &subLed3[0];
 8000ad8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000adc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8000ae0:	463a      	mov	r2, r7
 8000ae2:	649a      	str	r2, [r3, #72]	; 0x48




  		  strcpy(led[3].name, " Ld4: ");
 8000ae4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000ae8:	3378      	adds	r3, #120	; 0x78
 8000aea:	4a73      	ldr	r2, [pc, #460]	; (8000cb8 <main+0x600>)
 8000aec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af0:	6018      	str	r0, [r3, #0]
 8000af2:	3304      	adds	r3, #4
 8000af4:	8019      	strh	r1, [r3, #0]
 8000af6:	3302      	adds	r3, #2
 8000af8:	0c0a      	lsrs	r2, r1, #16
 8000afa:	701a      	strb	r2, [r3, #0]
  		  led[3].text[10] = " ";
 8000afc:	4b6f      	ldr	r3, [pc, #444]	; (8000cbc <main+0x604>)
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
  		  led[3].ddram_name = 0x48;
 8000b04:	2348      	movs	r3, #72	; 0x48
 8000b06:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
  		  led[3].ddram_text = NULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
  		  led[3].state_item = CHOOSED_LED;
 8000b10:	2305      	movs	r3, #5
 8000b12:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
  		  led[3].subItem = &subLed3[0];
 8000b16:	463b      	mov	r3, r7
 8000b18:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  		  led[3].parentalItem = &MainMenu;
 8000b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000b20:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  		  led[3].navigation_list = &led[0];
 8000b24:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000b28:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
  		  led[3].writeFunction = writeSubLedMenu;
 8000b2c:	4b64      	ldr	r3, [pc, #400]	; (8000cc0 <main+0x608>)
 8000b2e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

  			  strcpy(subLed3[0].name, " SET");
 8000b32:	463b      	mov	r3, r7
 8000b34:	4a63      	ldr	r2, [pc, #396]	; (8000cc4 <main+0x60c>)
 8000b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b3a:	6018      	str	r0, [r3, #0]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	7019      	strb	r1, [r3, #0]
  			  strcpy(subLed3[0].text, led[3].name);
 8000b40:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000b44:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8000b48:	463b      	mov	r3, r7
 8000b4a:	330a      	adds	r3, #10
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fb8e 	bl	8002270 <strcpy>
  			  subLed3[0].ddram_name = 0x40;
 8000b54:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b58:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000b5c:	2240      	movs	r2, #64	; 0x40
 8000b5e:	751a      	strb	r2, [r3, #20]
  			  subLed3[0].ddram_text = 0x00;
 8000b60:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b64:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000b68:	2200      	movs	r2, #0
 8000b6a:	755a      	strb	r2, [r3, #21]
  			  subLed3[0].state_item = SET_V;
 8000b6c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b70:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000b74:	2204      	movs	r2, #4
 8000b76:	759a      	strb	r2, [r3, #22]
  			  subLed3[0].subItem = NULL;
 8000b78:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b7c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  			  subLed3[0].parentalItem = &MainMenu;
 8000b84:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b88:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000b8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000b90:	61da      	str	r2, [r3, #28]
  			  subLed3[0].navigation_list = &subLed3[1];
 8000b92:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000b96:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000b9a:	463a      	mov	r2, r7
 8000b9c:	3228      	adds	r2, #40	; 0x28
 8000b9e:	621a      	str	r2, [r3, #32]


  			  strcpy(subLed3[1].name, " BACK");
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	3328      	adds	r3, #40	; 0x28
 8000ba4:	4a48      	ldr	r2, [pc, #288]	; (8000cc8 <main+0x610>)
 8000ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000baa:	6018      	str	r0, [r3, #0]
 8000bac:	3304      	adds	r3, #4
 8000bae:	8019      	strh	r1, [r3, #0]
  			  strcpy(subLed3[1].text, led[3].name);
 8000bb0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000bb4:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8000bb8:	463b      	mov	r3, r7
 8000bba:	3332      	adds	r3, #50	; 0x32
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fb56 	bl	8002270 <strcpy>
  			  subLed3[1].ddram_name = 0x48;
 8000bc4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000bc8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000bcc:	2248      	movs	r2, #72	; 0x48
 8000bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  			  subLed3[1].ddram_text = 0x00;
 8000bd2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000bd6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  			  subLed3[1].state_item = BACK;
 8000be0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000be4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000be8:	2203      	movs	r2, #3
 8000bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  			  subLed3[1].subItem = NULL;
 8000bee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000bf2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	641a      	str	r2, [r3, #64]	; 0x40
  			  subLed3[1].parentalItem = &MainMenu;
 8000bfa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000bfe:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000c02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8000c06:	645a      	str	r2, [r3, #68]	; 0x44
  			  subLed3[1].navigation_list = &subLed3[0];
 8000c08:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000c0c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000c10:	463a      	mov	r2, r7
 8000c12:	649a      	str	r2, [r3, #72]	; 0x48





  MainMenu.writeFunction(led);
 8000c14:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000c18:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	4798      	blx	r3

  struct MenuItem *horizontal_lvl_curr = &led[0],
 8000c20:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000c24:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
		  	  	  *horizontal_lvl_prev = NULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

  setCursor(horizontal_lvl_curr);
 8000c2e:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8000c32:	f000 fa2e 	bl	8001092 <setCursor>

  while (1)
  {
	 switch(button)
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <main+0x614>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d016      	beq.n	8000c6c <main+0x5b4>
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d1f9      	bne.n	8000c36 <main+0x57e>
	 {
	 case CHANGE:
		 button = 0;
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <main+0x614>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]

		 horizontal_lvl_prev = horizontal_lvl_curr;
 8000c48:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000c4c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

		 switchCursor(horizontal_lvl_prev, horizontal_lvl_prev->navigation_list);
 8000c50:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000c54:	6a1b      	ldr	r3, [r3, #32]
 8000c56:	4619      	mov	r1, r3
 8000c58:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8000c5c:	f000 f9fa 	bl	8001054 <switchCursor>

		 horizontal_lvl_curr = horizontal_lvl_prev->navigation_list;
 8000c60:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000c64:	6a1b      	ldr	r3, [r3, #32]
 8000c66:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

		 break;
 8000c6a:	e024      	b.n	8000cb6 <main+0x5fe>

	 case SELECT:
		 button = 0;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <main+0x614>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]

		 switch(horizontal_lvl_curr->state_item)
 8000c72:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000c76:	7d9b      	ldrb	r3, [r3, #22]
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d006      	beq.n	8000c8a <main+0x5d2>
 8000c7c:	2b05      	cmp	r3, #5
 8000c7e:	dc19      	bgt.n	8000cb4 <main+0x5fc>
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d00d      	beq.n	8000ca0 <main+0x5e8>
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	d014      	beq.n	8000cb2 <main+0x5fa>
//		 horizontal_lvl_curr = horizontal_lvl_curr->writeFunction(horizontal_lvl_curr->subItem);

/*		 horizontal_lvl_curr = horizontal_lvl_curr->subItem;
		 writeSubLedMenu(horizontal_lvl_curr);
*/
		 break;
 8000c88:	e014      	b.n	8000cb4 <main+0x5fc>
			 horizontal_lvl_curr = horizontal_lvl_curr->writeFunction(horizontal_lvl_curr->subItem);
 8000c8a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8000c94:	6992      	ldr	r2, [r2, #24]
 8000c96:	4610      	mov	r0, r2
 8000c98:	4798      	blx	r3
 8000c9a:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
			 break;
 8000c9e:	e009      	b.n	8000cb4 <main+0x5fc>
			 horizontal_lvl_curr = backFunc(horizontal_lvl_curr->parentalItem);
 8000ca0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fa03 	bl	80010b2 <backFunc>
 8000cac:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
			 break;
 8000cb0:	e000      	b.n	8000cb4 <main+0x5fc>
			 break;
 8000cb2:	bf00      	nop
		 break;
 8000cb4:	bf00      	nop
	 switch(button)
 8000cb6:	e7be      	b.n	8000c36 <main+0x57e>
 8000cb8:	080022c4 	.word	0x080022c4
 8000cbc:	08002298 	.word	0x08002298
 8000cc0:	08000fd1 	.word	0x08000fd1
 8000cc4:	080022a4 	.word	0x080022a4
 8000cc8:	080022ac 	.word	0x080022ac
 8000ccc:	20000038 	.word	0x20000038

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b094      	sub	sp, #80	; 0x50
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	2230      	movs	r2, #48	; 0x30
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fa9a 	bl	8002218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <SystemClock_Config+0xd0>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <SystemClock_Config+0xd0>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d02:	6413      	str	r3, [r2, #64]	; 0x40
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <SystemClock_Config+0xd0>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <SystemClock_Config+0xd4>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <SystemClock_Config+0xd4>)
 8000d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <SystemClock_Config+0xd4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d44:	2310      	movs	r3, #16
 8000d46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d48:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d52:	2307      	movs	r3, #7
 8000d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fdf8 	bl	8001950 <HAL_RCC_OscConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d66:	f000 f8f1 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2102      	movs	r1, #2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 f85a 	bl	8001e40 <HAL_RCC_ClockConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d92:	f000 f8db 	bl	8000f4c <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3750      	adds	r7, #80	; 0x50
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40007000 	.word	0x40007000

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b5e      	ldr	r3, [pc, #376]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a5d      	ldr	r2, [pc, #372]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b5b      	ldr	r3, [pc, #364]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b57      	ldr	r3, [pc, #348]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a56      	ldr	r2, [pc, #344]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b54      	ldr	r3, [pc, #336]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b50      	ldr	r3, [pc, #320]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a48      	ldr	r2, [pc, #288]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <MX_GPIO_Init+0x194>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f240 71f2 	movw	r1, #2034	; 0x7f2
 8000e34:	4842      	ldr	r0, [pc, #264]	; (8000f40 <MX_GPIO_Init+0x198>)
 8000e36:	f000 fd33 	bl	80018a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	4841      	ldr	r0, [pc, #260]	; (8000f44 <MX_GPIO_Init+0x19c>)
 8000e40:	f000 fd2e 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2138      	movs	r1, #56	; 0x38
 8000e48:	483f      	ldr	r0, [pc, #252]	; (8000f48 <MX_GPIO_Init+0x1a0>)
 8000e4a:	f000 fd29 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e54:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4837      	ldr	r0, [pc, #220]	; (8000f44 <MX_GPIO_Init+0x19c>)
 8000e66:	f000 fb97 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4831      	ldr	r0, [pc, #196]	; (8000f44 <MX_GPIO_Init+0x19c>)
 8000e80:	f000 fb8a 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin PA6
                           PA7 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 8000e84:	f240 73f2 	movw	r3, #2034	; 0x7f2
 8000e88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4828      	ldr	r0, [pc, #160]	; (8000f40 <MX_GPIO_Init+0x198>)
 8000e9e:	f000 fb7b 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4822      	ldr	r0, [pc, #136]	; (8000f44 <MX_GPIO_Init+0x19c>)
 8000eba:	f000 fb6d 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ebe:	2338      	movs	r3, #56	; 0x38
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481c      	ldr	r0, [pc, #112]	; (8000f48 <MX_GPIO_Init+0x1a0>)
 8000ed6:	f000 fb5f 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ede:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4816      	ldr	r0, [pc, #88]	; (8000f48 <MX_GPIO_Init+0x1a0>)
 8000ef0:	f000 fb52 	bl	8001598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2006      	movs	r0, #6
 8000efa:	f000 fb16 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000efe:	2006      	movs	r0, #6
 8000f00:	f000 fb2f 	bl	8001562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2007      	movs	r0, #7
 8000f0a:	f000 fb0e 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f0e:	2007      	movs	r0, #7
 8000f10:	f000 fb27 	bl	8001562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2017      	movs	r0, #23
 8000f1a:	f000 fb06 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f1e:	2017      	movs	r0, #23
 8000f20:	f000 fb1f 	bl	8001562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2028      	movs	r0, #40	; 0x28
 8000f2a:	f000 fafe 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f2e:	2028      	movs	r0, #40	; 0x28
 8000f30:	f000 fb17 	bl	8001562 <HAL_NVIC_EnableIRQ>

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020400 	.word	0x40020400

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>

08000f56 <writeText>:

/*############################################################################################################*/


void writeText(uint8_t *name_item, uint8_t ddram_item)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	70fb      	strb	r3, [r7, #3]
	setDDRAM(ddram_item);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fb3f 	bl	80005e8 <setDDRAM>

	sendText(name_item);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fb26 	bl	80005bc <sendText>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <writeMainMenu>:

/*############################################################################################################*/

struct MenuItem *writeMainMenu(const struct MenuItem const *items)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	clearDisplay();
 8000f80:	f7ff fb42 	bl	8000608 <clearDisplay>

	for(uint8_t count = 0; count < 4; count++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e017      	b.n	8000fba <writeMainMenu+0x42>
	{
		writeText(items[count].name, items[count].ddram_name);
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	7d1b      	ldrb	r3, [r3, #20]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff ffd1 	bl	8000f56 <writeText>
	for(uint8_t count = 0; count < 4; count++)
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d9e4      	bls.n	8000f8a <writeMainMenu+0x12>
	}

	setCursor(items);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f866 	bl	8001092 <setCursor>

	return items;
 8000fc6:	687b      	ldr	r3, [r7, #4]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <writeSubLedMenu>:

struct MenuItem *writeSubLedMenu(const struct MenuItem const *items)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	clearDisplay();
 8000fd8:	f7ff fb16 	bl	8000608 <clearDisplay>

	for(uint8_t count = 0; count < 2; count++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e02d      	b.n	800103e <writeSubLedMenu+0x6e>
	{
			writeText(items[count].name, items[count].ddram_name);
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	461a      	mov	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	7d1b      	ldrb	r3, [r3, #20]
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff ffa5 	bl	8000f56 <writeText>
			writeText(items[count].text, items[count].ddram_text);
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	461a      	mov	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	f103 000a 	add.w	r0, r3, #10
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	7d5b      	ldrb	r3, [r3, #21]
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff ff8f 	bl	8000f56 <writeText>
	for(uint8_t count = 0; count < 2; count++)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	3301      	adds	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d9ce      	bls.n	8000fe2 <writeSubLedMenu+0x12>
	}

	setCursor(items);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f824 	bl	8001092 <setCursor>

	return items;
 800104a:	687b      	ldr	r3, [r7, #4]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <switchCursor>:

/*############################################################################################################*/

void switchCursor(const struct MenuItem const *items_prev, const struct MenuItem const *item_curr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	clearCursor(items_prev);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f807 	bl	8001072 <clearCursor>
	setCursor(item_curr);
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f000 f814 	bl	8001092 <setCursor>

}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <clearCursor>:

void clearCursor(const struct MenuItem const *item_clr)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	setDDRAM(item_clr->ddram_name);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7d1b      	ldrb	r3, [r3, #20]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fab2 	bl	80005e8 <setDDRAM>

	sendData(' ');
 8001084:	2020      	movs	r0, #32
 8001086:	f7ff fa69 	bl	800055c <sendData>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <setCursor>:

void setCursor(const struct MenuItem const *item_st)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]

	setDDRAM(item_st->ddram_name);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7d1b      	ldrb	r3, [r3, #20]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff faa2 	bl	80005e8 <setDDRAM>

	sendData('>');
 80010a4:	203e      	movs	r0, #62	; 0x3e
 80010a6:	f7ff fa59 	bl	800055c <sendData>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <backFunc>:

/*############################################################################################################*/

struct MenuItem *backFunc(const struct MenuItem *back_item)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	return back_item->writeFunction(back_item->subItem);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6992      	ldr	r2, [r2, #24]
 80010c2:	4610      	mov	r0, r2
 80010c4:	4798      	blx	r3
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_MspInit+0x4c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_MspInit+0x4c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800110e:	2007      	movs	r0, #7
 8001110:	f000 fa00 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f8be 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET)
	{
		button = CHANGE;
	}
*/
	button = SELECT;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <EXTI0_IRQHandler+0x14>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]

//	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fbc2 	bl	8001908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000038 	.word	0x20000038

0800118c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	{
		button = CHANGE;
	}
	*/

	button = CHANGE;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <EXTI1_IRQHandler+0x14>)
 8001192:	2202      	movs	r2, #2
 8001194:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001196:	2002      	movs	r0, #2
 8001198:	f000 fbb6 	bl	8001908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000038 	.word	0x20000038

080011a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
	*/
//	button = SELECT;
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	f000 fbad 	bl	8001908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80011b8:	2101      	movs	r1, #1
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <EXTI15_10_IRQHandler+0x18>)
 80011bc:	f000 fb89 	bl	80018d2 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011c4:	f000 fba0 	bl	8001908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020000 	.word	0x40020000

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011fa:	490e      	ldr	r1, [pc, #56]	; (8001234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001210:	4c0b      	ldr	r4, [pc, #44]	; (8001240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800121e:	f7ff ffd7 	bl	80011d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f001 f801 	bl	8002228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff fa47 	bl	80006b8 <main>
  bx  lr    
 800122a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800122c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001238:	080022ec 	.word	0x080022ec
  ldr r2, =_sbss
 800123c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001240:	20000040 	.word	0x20000040

08001244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_Init+0x40>)
 8001252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_Init+0x40>)
 800125e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_Init+0x40>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f94f 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	2000      	movs	r0, #0
 8001278:	f000 f808 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff ff28 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023c00 	.word	0x40023c00

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f967 	bl	800157e <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c8:	f000 f92f 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000010 	.word	0x20000010
 80012e4:	20000018 	.word	0x20000018
 80012e8:	20000014 	.word	0x20000014

080012ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x20>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x24>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_IncTick+0x24>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000018 	.word	0x20000018
 8001310:	2000003c 	.word	0x2000003c

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	2000003c 	.word	0x2000003c

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff ffee 	bl	8001314 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_Delay+0x44>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001352:	bf00      	nop
 8001354:	f7ff ffde 	bl	8001314 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000018 	.word	0x20000018

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <__NVIC_EnableIRQ+0x38>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff29 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff3e 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff8e 	bl	8001468 <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5d 	bl	8001414 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff31 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa2 	bl	80014d0 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	e159      	b.n	8001868 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	f040 8148 	bne.w	8001862 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d005      	beq.n	80015ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d130      	bne.n	800164c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 0201 	and.w	r2, r3, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b03      	cmp	r3, #3
 8001656:	d017      	beq.n	8001688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d123      	bne.n	80016dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3208      	adds	r2, #8
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	08da      	lsrs	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3208      	adds	r2, #8
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a2 	beq.w	8001862 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b57      	ldr	r3, [pc, #348]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a56      	ldr	r2, [pc, #344]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b54      	ldr	r3, [pc, #336]	; (8001880 <HAL_GPIO_Init+0x2e8>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173a:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a49      	ldr	r2, [pc, #292]	; (8001888 <HAL_GPIO_Init+0x2f0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x202>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a48      	ldr	r2, [pc, #288]	; (800188c <HAL_GPIO_Init+0x2f4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x1fe>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a47      	ldr	r2, [pc, #284]	; (8001890 <HAL_GPIO_Init+0x2f8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x1fa>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a46      	ldr	r2, [pc, #280]	; (8001894 <HAL_GPIO_Init+0x2fc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x1f6>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a45      	ldr	r2, [pc, #276]	; (8001898 <HAL_GPIO_Init+0x300>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x1f2>
 8001786:	2304      	movs	r3, #4
 8001788:	e008      	b.n	800179c <HAL_GPIO_Init+0x204>
 800178a:	2307      	movs	r3, #7
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x204>
 800178e:	2303      	movs	r3, #3
 8001790:	e004      	b.n	800179c <HAL_GPIO_Init+0x204>
 8001792:	2302      	movs	r3, #2
 8001794:	e002      	b.n	800179c <HAL_GPIO_Init+0x204>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x204>
 800179a:	2300      	movs	r3, #0
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f002 0203 	and.w	r2, r2, #3
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	4093      	lsls	r3, r2
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ac:	4935      	ldr	r1, [pc, #212]	; (8001884 <HAL_GPIO_Init+0x2ec>)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	3302      	adds	r3, #2
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_GPIO_Init+0x304>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017de:	4a2f      	ldr	r2, [pc, #188]	; (800189c <HAL_GPIO_Init+0x304>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_GPIO_Init+0x304>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001808:	4a24      	ldr	r2, [pc, #144]	; (800189c <HAL_GPIO_Init+0x304>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_GPIO_Init+0x304>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001832:	4a1a      	ldr	r2, [pc, #104]	; (800189c <HAL_GPIO_Init+0x304>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_GPIO_Init+0x304>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800185c:	4a0f      	ldr	r2, [pc, #60]	; (800189c <HAL_GPIO_Init+0x304>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3301      	adds	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	2b0f      	cmp	r3, #15
 800186c:	f67f aea2 	bls.w	80015b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3724      	adds	r7, #36	; 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40013800 	.word	0x40013800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00
 8001898:	40021000 	.word	0x40021000
 800189c:	40013c00 	.word	0x40013c00

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	619a      	str	r2, [r3, #24]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018e4:	887a      	ldrh	r2, [r7, #2]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	041a      	lsls	r2, r3, #16
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	400b      	ands	r3, r1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f806 	bl	8001938 <HAL_GPIO_EXTI_Callback>
  }
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40013c00 	.word	0x40013c00

08001938 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e267      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d075      	beq.n	8001a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800196e:	4b88      	ldr	r3, [pc, #544]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d00c      	beq.n	8001994 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197a:	4b85      	ldr	r3, [pc, #532]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001982:	2b08      	cmp	r3, #8
 8001984:	d112      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001986:	4b82      	ldr	r3, [pc, #520]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001992:	d10b      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	4b7e      	ldr	r3, [pc, #504]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d05b      	beq.n	8001a58 <HAL_RCC_OscConfig+0x108>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d157      	bne.n	8001a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e242      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x74>
 80019b6:	4b76      	ldr	r3, [pc, #472]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a75      	ldr	r2, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e01d      	b.n	8001a00 <HAL_RCC_OscConfig+0xb0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x98>
 80019ce:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6f      	ldr	r2, [pc, #444]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b6d      	ldr	r3, [pc, #436]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a6c      	ldr	r2, [pc, #432]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0xb0>
 80019e8:	4b69      	ldr	r3, [pc, #420]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a68      	ldr	r2, [pc, #416]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b66      	ldr	r3, [pc, #408]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fc84 	bl	8001314 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff fc80 	bl	8001314 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e207      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b5b      	ldr	r3, [pc, #364]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0xc0>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fc70 	bl	8001314 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fc6c 	bl	8001314 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1f3      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	4b51      	ldr	r3, [pc, #324]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0xe8>
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d063      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a66:	4b4a      	ldr	r3, [pc, #296]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d11c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7e:	4b44      	ldr	r3, [pc, #272]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d116      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x152>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e1c7      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4937      	ldr	r1, [pc, #220]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	e03a      	b.n	8001b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac0:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_OscConfig+0x244>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fc25 	bl	8001314 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff fc21 	bl	8001314 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1a8      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4925      	ldr	r1, [pc, #148]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
 8001b00:	e015      	b.n	8001b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b02:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_OscConfig+0x244>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fc04 	bl	8001314 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b10:	f7ff fc00 	bl	8001314 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e187      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d036      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d016      	beq.n	8001b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_RCC_OscConfig+0x248>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff fbe4 	bl	8001314 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff fbe0 	bl	8001314 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e167      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x200>
 8001b6e:	e01b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_OscConfig+0x248>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fbcd 	bl	8001314 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	e00e      	b.n	8001b9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fbc9 	bl	8001314 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d907      	bls.n	8001b9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e150      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
 8001b90:	40023800 	.word	0x40023800
 8001b94:	42470000 	.word	0x42470000
 8001b98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9c:	4b88      	ldr	r3, [pc, #544]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1ea      	bne.n	8001b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 8097 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bba:	4b81      	ldr	r3, [pc, #516]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10f      	bne.n	8001be6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	4b7d      	ldr	r3, [pc, #500]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a7c      	ldr	r2, [pc, #496]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b7a      	ldr	r3, [pc, #488]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b77      	ldr	r3, [pc, #476]	; (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf2:	4b74      	ldr	r3, [pc, #464]	; (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a73      	ldr	r2, [pc, #460]	; (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fb89 	bl	8001314 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff fb85 	bl	8001314 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e10c      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x2ea>
 8001c2c:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c30:	4a63      	ldr	r2, [pc, #396]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6713      	str	r3, [r2, #112]	; 0x70
 8001c38:	e01c      	b.n	8001c74 <HAL_RCC_OscConfig+0x324>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x30c>
 8001c42:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c46:	4a5e      	ldr	r2, [pc, #376]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	4a5b      	ldr	r2, [pc, #364]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0x324>
 8001c5c:	4b58      	ldr	r3, [pc, #352]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	; 0x70
 8001c68:	4b55      	ldr	r3, [pc, #340]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	4a54      	ldr	r2, [pc, #336]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	f023 0304 	bic.w	r3, r3, #4
 8001c72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d015      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fb4a 	bl	8001314 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7ff fb46 	bl	8001314 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e0cb      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	4b49      	ldr	r3, [pc, #292]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0ee      	beq.n	8001c84 <HAL_RCC_OscConfig+0x334>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fb34 	bl	8001314 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fb30 	bl	8001314 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e0b5      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc6:	4b3e      	ldr	r3, [pc, #248]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ee      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd8:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	4a38      	ldr	r2, [pc, #224]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80a1 	beq.w	8001e30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cee:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d05c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d141      	bne.n	8001d86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_RCC_OscConfig+0x478>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fb04 	bl	8001314 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff fb00 	bl	8001314 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e087      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	019b      	lsls	r3, r3, #6
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	085b      	lsrs	r3, r3, #1
 8001d46:	3b01      	subs	r3, #1
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	491b      	ldr	r1, [pc, #108]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x478>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fad9 	bl	8001314 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d66:	f7ff fad5 	bl	8001314 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e05c      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x416>
 8001d84:	e054      	b.n	8001e30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_RCC_OscConfig+0x478>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fac2 	bl	8001314 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff fabe 	bl	8001314 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e045      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x444>
 8001db2:	e03d      	b.n	8001e30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e038      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_RCC_OscConfig+0x4ec>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d028      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d121      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d11a      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d111      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	3b01      	subs	r3, #1
 8001e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0cc      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d90c      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0b8      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e94:	4b59      	ldr	r3, [pc, #356]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4a58      	ldr	r2, [pc, #352]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eac:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a52      	ldr	r2, [pc, #328]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb8:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	494d      	ldr	r1, [pc, #308]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d044      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d119      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e07f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d003      	beq.n	8001efe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efe:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e067      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f1e:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f023 0203 	bic.w	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4934      	ldr	r1, [pc, #208]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f30:	f7ff f9f0 	bl	8001314 <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f38:	f7ff f9ec 	bl	8001314 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e04f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 020c 	and.w	r2, r3, #12
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d1eb      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f60:	4b25      	ldr	r3, [pc, #148]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d20c      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e032      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4916      	ldr	r1, [pc, #88]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	490e      	ldr	r1, [pc, #56]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fc6:	f000 f821 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	490a      	ldr	r1, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	5ccb      	ldrb	r3, [r1, r3]
 8001fda:	fa22 f303 	lsr.w	r3, r2, r3
 8001fde:	4a09      	ldr	r2, [pc, #36]	; (8002004 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f950 	bl	800128c <HAL_InitTick>

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023c00 	.word	0x40023c00
 8001ffc:	40023800 	.word	0x40023800
 8002000:	080022cc 	.word	0x080022cc
 8002004:	20000010 	.word	0x20000010
 8002008:	20000014 	.word	0x20000014

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002010:	b094      	sub	sp, #80	; 0x50
 8002012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
 8002018:	2300      	movs	r3, #0
 800201a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800201c:	2300      	movs	r3, #0
 800201e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002024:	4b79      	ldr	r3, [pc, #484]	; (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d00d      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x40>
 8002030:	2b08      	cmp	r3, #8
 8002032:	f200 80e1 	bhi.w	80021f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x34>
 800203a:	2b04      	cmp	r3, #4
 800203c:	d003      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x3a>
 800203e:	e0db      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002040:	4b73      	ldr	r3, [pc, #460]	; (8002210 <HAL_RCC_GetSysClockFreq+0x204>)
 8002042:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002044:	e0db      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002046:	4b73      	ldr	r3, [pc, #460]	; (8002214 <HAL_RCC_GetSysClockFreq+0x208>)
 8002048:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800204a:	e0d8      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204c:	4b6f      	ldr	r3, [pc, #444]	; (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002054:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002056:	4b6d      	ldr	r3, [pc, #436]	; (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d063      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002062:	4b6a      	ldr	r3, [pc, #424]	; (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	099b      	lsrs	r3, r3, #6
 8002068:	2200      	movs	r2, #0
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
 800206c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002074:	633b      	str	r3, [r7, #48]	; 0x30
 8002076:	2300      	movs	r3, #0
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
 800207a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800207e:	4622      	mov	r2, r4
 8002080:	462b      	mov	r3, r5
 8002082:	f04f 0000 	mov.w	r0, #0
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	0159      	lsls	r1, r3, #5
 800208c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002090:	0150      	lsls	r0, r2, #5
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4621      	mov	r1, r4
 8002098:	1a51      	subs	r1, r2, r1
 800209a:	6139      	str	r1, [r7, #16]
 800209c:	4629      	mov	r1, r5
 800209e:	eb63 0301 	sbc.w	r3, r3, r1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020b0:	4659      	mov	r1, fp
 80020b2:	018b      	lsls	r3, r1, #6
 80020b4:	4651      	mov	r1, sl
 80020b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ba:	4651      	mov	r1, sl
 80020bc:	018a      	lsls	r2, r1, #6
 80020be:	4651      	mov	r1, sl
 80020c0:	ebb2 0801 	subs.w	r8, r2, r1
 80020c4:	4659      	mov	r1, fp
 80020c6:	eb63 0901 	sbc.w	r9, r3, r1
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020de:	4690      	mov	r8, r2
 80020e0:	4699      	mov	r9, r3
 80020e2:	4623      	mov	r3, r4
 80020e4:	eb18 0303 	adds.w	r3, r8, r3
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	462b      	mov	r3, r5
 80020ec:	eb49 0303 	adc.w	r3, r9, r3
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020fe:	4629      	mov	r1, r5
 8002100:	024b      	lsls	r3, r1, #9
 8002102:	4621      	mov	r1, r4
 8002104:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002108:	4621      	mov	r1, r4
 800210a:	024a      	lsls	r2, r1, #9
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002112:	2200      	movs	r2, #0
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
 8002116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800211c:	f7fe f85a 	bl	80001d4 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002128:	e058      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212a:	4b38      	ldr	r3, [pc, #224]	; (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	099b      	lsrs	r3, r3, #6
 8002130:	2200      	movs	r2, #0
 8002132:	4618      	mov	r0, r3
 8002134:	4611      	mov	r1, r2
 8002136:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
 8002140:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002144:	4642      	mov	r2, r8
 8002146:	464b      	mov	r3, r9
 8002148:	f04f 0000 	mov.w	r0, #0
 800214c:	f04f 0100 	mov.w	r1, #0
 8002150:	0159      	lsls	r1, r3, #5
 8002152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002156:	0150      	lsls	r0, r2, #5
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4641      	mov	r1, r8
 800215e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002162:	4649      	mov	r1, r9
 8002164:	eb63 0b01 	sbc.w	fp, r3, r1
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002174:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002178:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800217c:	ebb2 040a 	subs.w	r4, r2, sl
 8002180:	eb63 050b 	sbc.w	r5, r3, fp
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	00eb      	lsls	r3, r5, #3
 800218e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002192:	00e2      	lsls	r2, r4, #3
 8002194:	4614      	mov	r4, r2
 8002196:	461d      	mov	r5, r3
 8002198:	4643      	mov	r3, r8
 800219a:	18e3      	adds	r3, r4, r3
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	464b      	mov	r3, r9
 80021a0:	eb45 0303 	adc.w	r3, r5, r3
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021b2:	4629      	mov	r1, r5
 80021b4:	028b      	lsls	r3, r1, #10
 80021b6:	4621      	mov	r1, r4
 80021b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021bc:	4621      	mov	r1, r4
 80021be:	028a      	lsls	r2, r1, #10
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c6:	2200      	movs	r2, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	61fa      	str	r2, [r7, #28]
 80021cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d0:	f7fe f800 	bl	80001d4 <__aeabi_uldivmod>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4613      	mov	r3, r2
 80021da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	3301      	adds	r3, #1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80021ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021f6:	e002      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCC_GetSysClockFreq+0x204>)
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002200:	4618      	mov	r0, r3
 8002202:	3750      	adds	r7, #80	; 0x50
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	00f42400 	.word	0x00f42400
 8002214:	007a1200 	.word	0x007a1200

08002218 <memset>:
 8002218:	4402      	add	r2, r0
 800221a:	4603      	mov	r3, r0
 800221c:	4293      	cmp	r3, r2
 800221e:	d100      	bne.n	8002222 <memset+0xa>
 8002220:	4770      	bx	lr
 8002222:	f803 1b01 	strb.w	r1, [r3], #1
 8002226:	e7f9      	b.n	800221c <memset+0x4>

08002228 <__libc_init_array>:
 8002228:	b570      	push	{r4, r5, r6, lr}
 800222a:	4d0d      	ldr	r5, [pc, #52]	; (8002260 <__libc_init_array+0x38>)
 800222c:	4c0d      	ldr	r4, [pc, #52]	; (8002264 <__libc_init_array+0x3c>)
 800222e:	1b64      	subs	r4, r4, r5
 8002230:	10a4      	asrs	r4, r4, #2
 8002232:	2600      	movs	r6, #0
 8002234:	42a6      	cmp	r6, r4
 8002236:	d109      	bne.n	800224c <__libc_init_array+0x24>
 8002238:	4d0b      	ldr	r5, [pc, #44]	; (8002268 <__libc_init_array+0x40>)
 800223a:	4c0c      	ldr	r4, [pc, #48]	; (800226c <__libc_init_array+0x44>)
 800223c:	f000 f820 	bl	8002280 <_init>
 8002240:	1b64      	subs	r4, r4, r5
 8002242:	10a4      	asrs	r4, r4, #2
 8002244:	2600      	movs	r6, #0
 8002246:	42a6      	cmp	r6, r4
 8002248:	d105      	bne.n	8002256 <__libc_init_array+0x2e>
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002250:	4798      	blx	r3
 8002252:	3601      	adds	r6, #1
 8002254:	e7ee      	b.n	8002234 <__libc_init_array+0xc>
 8002256:	f855 3b04 	ldr.w	r3, [r5], #4
 800225a:	4798      	blx	r3
 800225c:	3601      	adds	r6, #1
 800225e:	e7f2      	b.n	8002246 <__libc_init_array+0x1e>
 8002260:	080022e4 	.word	0x080022e4
 8002264:	080022e4 	.word	0x080022e4
 8002268:	080022e4 	.word	0x080022e4
 800226c:	080022e8 	.word	0x080022e8

08002270 <strcpy>:
 8002270:	4603      	mov	r3, r0
 8002272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002276:	f803 2b01 	strb.w	r2, [r3], #1
 800227a:	2a00      	cmp	r2, #0
 800227c:	d1f9      	bne.n	8002272 <strcpy+0x2>
 800227e:	4770      	bx	lr

08002280 <_init>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr

0800228c <_fini>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	bf00      	nop
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr

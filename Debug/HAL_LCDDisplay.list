
HAL_LCDDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ecc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800411c  0800411c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004124  08004124  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800412c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000006c  08004198  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004198  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090c9  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b8  00000000  00000000  000291a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  0002ab60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007df  00000000  00000000  0002b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016362  00000000  00000000  0002bd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b53d  00000000  00000000  000420e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008adbb  00000000  00000000  0004d626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f28  00000000  00000000  000d83e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000db30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004054 	.word	0x08004054

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004054 	.word	0x08004054

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <strub>:
#include "LCD_Lib.h"

uint16_t LCD_bus[8] = {D7_PIN, D6_PIN, D5_PIN, D4_PIN, D3_PIN, D2_PIN, D1_PIN, D0_PIN};

void strub()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); //state of pin MUST BE INVERSE
 8000580:	2201      	movs	r2, #1
 8000582:	2120      	movs	r1, #32
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <strub+0x28>)
 8000586:	f001 ff9b 	bl	80024c0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800058a:	200a      	movs	r0, #10
 800058c:	f001 fcde 	bl	8001f4c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0); //state of pin MUST BE INVERSE
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <strub+0x28>)
 8000596:	f001 ff93 	bl	80024c0 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 800059a:	201e      	movs	r0, #30
 800059c:	f001 fcd6 	bl	8001f4c <HAL_Delay>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020400 	.word	0x40020400

080005a8 <sendBite>:

void sendBite(uint8_t bite)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MANAGE_PORT, RS, 0); //state of pin MUST BE INVERSE
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	4811      	ldr	r0, [pc, #68]	; (80005fc <sendBite+0x54>)
 80005b8:	f001 ff82 	bl	80024c0 <HAL_GPIO_WritePin>

	for(uint8_t count = 0; count < NUM_BIT; count++)
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e012      	b.n	80005e8 <sendBite+0x40>
	{
		HAL_GPIO_WritePin(DATA_PORT, LCD_bus[count], (0b10000000 & (bite << count)));
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <sendBite+0x58>)
 80005c6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <sendBite+0x5c>)
 80005de:	f001 ff6f 	bl	80024c0 <HAL_GPIO_WritePin>
	for(uint8_t count = 0; count < NUM_BIT; count++)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	3301      	adds	r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	2b07      	cmp	r3, #7
 80005ec:	d9e9      	bls.n	80005c2 <sendBite+0x1a>
	}

	strub();
 80005ee:	f7ff ffc5 	bl	800057c <strub>
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40020400 	.word	0x40020400
 8000600:	20000000 	.word	0x20000000
 8000604:	40020000 	.word	0x40020000

08000608 <sendData>:

void sendData(uint8_t data)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MANAGE_PORT, RS, 1); //state of pin MUST BE INVERSE
 8000612:	2201      	movs	r2, #1
 8000614:	2108      	movs	r1, #8
 8000616:	4811      	ldr	r0, [pc, #68]	; (800065c <sendData+0x54>)
 8000618:	f001 ff52 	bl	80024c0 <HAL_GPIO_WritePin>

	for(uint8_t count = 0; count < NUM_BIT; count++)
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	e012      	b.n	8000648 <sendData+0x40>
	{
		HAL_GPIO_WritePin(DATA_PORT, LCD_bus[count], (0b10000000 & (data << count)));
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <sendData+0x58>)
 8000626:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800062a:	79fa      	ldrb	r2, [r7, #7]
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <sendData+0x5c>)
 800063e:	f001 ff3f 	bl	80024c0 <HAL_GPIO_WritePin>
	for(uint8_t count = 0; count < NUM_BIT; count++)
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	3301      	adds	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	2b07      	cmp	r3, #7
 800064c:	d9e9      	bls.n	8000622 <sendData+0x1a>
	}

	strub();
 800064e:	f7ff ff95 	bl	800057c <strub>
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020400 	.word	0x40020400
 8000660:	20000000 	.word	0x20000000
 8000664:	40020000 	.word	0x40020000

08000668 <sendText>:

void sendText(uint8_t *text)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
//	uint8_t count = 0;

	while(*text != '\0')
 8000670:	e007      	b.n	8000682 <sendText+0x1a>
	{
		sendData(*text);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffc6 	bl	8000608 <sendData>

		*text++;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3301      	adds	r3, #1
 8000680:	607b      	str	r3, [r7, #4]
	while(*text != '\0')
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f3      	bne.n	8000672 <sendText+0xa>
	}
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <setDDRAM>:

void setDDRAM(uint8_t DDRAM)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
	sendBite(SET_DDRAM | DDRAM);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff7e 	bl	80005a8 <sendBite>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <clearDisplay>:

void clearDisplay()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	sendBite(0x01);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff ff75 	bl	80005a8 <sendBite>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <displayControl>:

displayControl(uint8_t display_seting)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	4603      	mov	r3, r0
 80006ca:	71fb      	strb	r3, [r7, #7]
	sendBite(0x08 | display_seting);
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff67 	bl	80005a8 <sendBite>
//	sendBite(0b00001100);
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <init_8bit_interface>:

void init_8bit_interface()
{/*
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
	sendBite(0x01);
	HAL_Delay(2);
*/
/*############################*/

	HAL_Delay(50);
 80006e6:	2032      	movs	r0, #50	; 0x32
 80006e8:	f001 fc30 	bl	8001f4c <HAL_Delay>
	sendBite(0x30);
 80006ec:	2030      	movs	r0, #48	; 0x30
 80006ee:	f7ff ff5b 	bl	80005a8 <sendBite>
	HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f001 fc2a 	bl	8001f4c <HAL_Delay>
	sendBite(0x30);
 80006f8:	2030      	movs	r0, #48	; 0x30
 80006fa:	f7ff ff55 	bl	80005a8 <sendBite>
	HAL_Delay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f001 fc24 	bl	8001f4c <HAL_Delay>
	sendBite(0x08);
 8000704:	2008      	movs	r0, #8
 8000706:	f7ff ff4f 	bl	80005a8 <sendBite>
	HAL_Delay(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f001 fc1e 	bl	8001f4c <HAL_Delay>
	sendBite(0x01);
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff ff49 	bl	80005a8 <sendBite>
	HAL_Delay(2);
 8000716:	2002      	movs	r0, #2
 8000718:	f001 fc18 	bl	8001f4c <HAL_Delay>
	sendBite(0x04);
 800071c:	2004      	movs	r0, #4
 800071e:	f7ff ff43 	bl	80005a8 <sendBite>

	sendBite(0x38);
 8000722:	2038      	movs	r0, #56	; 0x38
 8000724:	f7ff ff40 	bl	80005a8 <sendBite>
	HAL_Delay(5);
 8000728:	2005      	movs	r0, #5
 800072a:	f001 fc0f 	bl	8001f4c <HAL_Delay>
	sendBite(0x06);
 800072e:	2006      	movs	r0, #6
 8000730:	f7ff ff3a 	bl	80005a8 <sendBite>
	HAL_Delay(5);
 8000734:	2005      	movs	r0, #5
 8000736:	f001 fc09 	bl	8001f4c <HAL_Delay>
	sendBite(0x10);
 800073a:	2010      	movs	r0, #16
 800073c:	f7ff ff34 	bl	80005a8 <sendBite>
	HAL_Delay(5);
 8000740:	2005      	movs	r0, #5
 8000742:	f001 fc03 	bl	8001f4c <HAL_Delay>
	sendBite(0x0F);
 8000746:	200f      	movs	r0, #15
 8000748:	f7ff ff2e 	bl	80005a8 <sendBite>
	HAL_Delay(5);
 800074c:	2005      	movs	r0, #5
 800074e:	f001 fbfd 	bl	8001f4c <HAL_Delay>
	sendBite(0x02);
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff ff28 	bl	80005a8 <sendBite>
	HAL_Delay(5);
 8000758:	2005      	movs	r0, #5
 800075a:	f001 fbf7 	bl	8001f4c <HAL_Delay>


}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f001 fb7c 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 fee6 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f001 f818 	bl	80017a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000778:	f000 ff4e 	bl	8001618 <MX_TIM2_Init>
  MX_TIM3_Init();
 800077c:	f000 ffa4 	bl	80016c8 <MX_TIM3_Init>
  /* USER CODE BEGIN WHILE */
//  HAL_GPIO_WritePin(MANAGE_PORT, RW, 1);
//  HAL_GPIO_WritePin(MANAGE_PORT, RS, 1);

//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);//because pin is invert
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000780:	2100      	movs	r1, #0
 8000782:	48e8      	ldr	r0, [pc, #928]	; (8000b24 <main+0x3c0>)
 8000784:	f002 fba8 	bl	8002ed8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000788:	2108      	movs	r1, #8
 800078a:	48e7      	ldr	r0, [pc, #924]	; (8000b28 <main+0x3c4>)
 800078c:	f002 fba4 	bl	8002ed8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000790:	210c      	movs	r1, #12
 8000792:	48e5      	ldr	r0, [pc, #916]	; (8000b28 <main+0x3c4>)
 8000794:	f002 fba0 	bl	8002ed8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000798:	2100      	movs	r1, #0
 800079a:	48e3      	ldr	r0, [pc, #908]	; (8000b28 <main+0x3c4>)
 800079c:	f002 fb9c 	bl	8002ed8 <HAL_TIM_PWM_Start>

  init_8bit_interface();
 80007a0:	f7ff ff9f 	bl	80006e2 <init_8bit_interface>
  displayControl(CURSOR_BLINK_OFF & CURSOR_OFF);
 80007a4:	2004      	movs	r0, #4
 80007a6:	f7ff ff8c 	bl	80006c2 <displayControl>
  HAL_Delay(10);
 80007aa:	200a      	movs	r0, #10
 80007ac:	f001 fbce 	bl	8001f4c <HAL_Delay>
                                    subLed1[4],
									subLed2[4],
									subLed3[4];


  	  MainMenu.name[10] = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f887 337e 	strb.w	r3, [r7, #894]	; 0x37e
  	  MainMenu.text[10] = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 3388 	strb.w	r3, [r7, #904]	; 0x388
  	  MainMenu.ddram_name = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 3388 	strb.w	r3, [r7, #904]	; 0x388
  	  MainMenu.ddram_text = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f887 3389 	strb.w	r3, [r7, #905]	; 0x389
  	  MainMenu.subItem = led;
 80007c8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80007cc:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
  	  MainMenu.parentalItem = NULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
  	  MainMenu.navigation_list = NULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
  	  MainMenu.itemFunction = writeMainMenu;
 80007dc:	4bd3      	ldr	r3, [pc, #844]	; (8000b2c <main+0x3c8>)
 80007de:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c


  	  	  led[0].PWM_lvl = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
  		  sprintf(led[0].name, " Ld1:");
 80007e8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80007ec:	49d0      	ldr	r1, [pc, #832]	; (8000b30 <main+0x3cc>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 ff84 	bl	80036fc <siprintf>
  		  sprintf(led[0].text, " Ld1:%d", led[0].PWM_lvl);
 80007f4:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 80007f8:	461a      	mov	r2, r3
 80007fa:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80007fe:	330a      	adds	r3, #10
 8000800:	49cc      	ldr	r1, [pc, #816]	; (8000b34 <main+0x3d0>)
 8000802:	4618      	mov	r0, r3
 8000804:	f002 ff7a 	bl	80036fc <siprintf>
  		  led[0].ddram_name = 0x00;
 8000808:	2300      	movs	r3, #0
 800080a:	f887 32d8 	strb.w	r3, [r7, #728]	; 0x2d8
  		  led[0].ddram_text = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	f887 32d9 	strb.w	r3, [r7, #729]	; 0x2d9
  		  led[0].state_item = CHOOSED_LED;
 8000814:	2305      	movs	r3, #5
 8000816:	f887 32da 	strb.w	r3, [r7, #730]	; 0x2da
  		  led[0].subItem = &subLed0[0];
 800081a:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800081e:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
  		  led[0].parentalItem = NULL;
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
  		  led[0].navigation_list = &led[1];
 8000828:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800082c:	332c      	adds	r3, #44	; 0x2c
 800082e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
  		  led[0].itemFunction = writeSubLedMenu;
 8000832:	4bc1      	ldr	r3, [pc, #772]	; (8000b38 <main+0x3d4>)
 8000834:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
  		  led[0].PWM_Reg = &(TIM2->CCR1);
 8000838:	4bc0      	ldr	r3, [pc, #768]	; (8000b3c <main+0x3d8>)
 800083a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc

  		  	  strcpy(subLed0[0].name, (const char*)" -");
 800083e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000842:	4abf      	ldr	r2, [pc, #764]	; (8000b40 <main+0x3dc>)
 8000844:	6812      	ldr	r2, [r2, #0]
 8000846:	4611      	mov	r1, r2
 8000848:	8019      	strh	r1, [r3, #0]
 800084a:	3302      	adds	r3, #2
 800084c:	0c12      	lsrs	r2, r2, #16
 800084e:	701a      	strb	r2, [r3, #0]
  		      sprintf(subLed0[0].text, "%s", led[0].name);
 8000850:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000854:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000858:	330a      	adds	r3, #10
 800085a:	49ba      	ldr	r1, [pc, #744]	; (8000b44 <main+0x3e0>)
 800085c:	4618      	mov	r0, r3
 800085e:	f002 ff4d 	bl	80036fc <siprintf>
			  subLed0[0].ddram_name = 0x44;
 8000862:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000866:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800086a:	2244      	movs	r2, #68	; 0x44
 800086c:	751a      	strb	r2, [r3, #20]
			  subLed0[0].ddram_text = 0x00;
 800086e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000872:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000876:	2200      	movs	r2, #0
 8000878:	755a      	strb	r2, [r3, #21]
			  subLed0[0].state_item = MINUS;
 800087a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800087e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000882:	2206      	movs	r2, #6
 8000884:	759a      	strb	r2, [r3, #22]
			  subLed0[0].PWM_lvl = 0;
 8000886:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800088a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800088e:	2200      	movs	r2, #0
 8000890:	75da      	strb	r2, [r3, #23]
			  subLed0[0].subItem = &led[0];
 8000892:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000896:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800089a:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800089e:	61da      	str	r2, [r3, #28]
			  subLed0[0].parentalItem = &MainMenu;
 80008a0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80008a4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80008a8:	f507 725d 	add.w	r2, r7, #884	; 0x374
 80008ac:	621a      	str	r2, [r3, #32]
			  subLed0[0].navigation_list = &subLed0[1];
 80008ae:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80008b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80008b6:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80008ba:	322c      	adds	r2, #44	; 0x2c
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
			  subLed0[0].itemFunction = reWrite;
 80008be:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80008c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80008c6:	4aa0      	ldr	r2, [pc, #640]	; (8000b48 <main+0x3e4>)
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28

			  strcpy(subLed0[1].name, (const char*)" +");
 80008ca:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80008ce:	332c      	adds	r3, #44	; 0x2c
 80008d0:	4a9e      	ldr	r2, [pc, #632]	; (8000b4c <main+0x3e8>)
 80008d2:	6812      	ldr	r2, [r2, #0]
 80008d4:	4611      	mov	r1, r2
 80008d6:	8019      	strh	r1, [r3, #0]
 80008d8:	3302      	adds	r3, #2
 80008da:	0c12      	lsrs	r2, r2, #16
 80008dc:	701a      	strb	r2, [r3, #0]
			  sprintf(subLed0[1].text, "%s", led[0].name);
 80008de:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80008e2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80008e6:	3336      	adds	r3, #54	; 0x36
 80008e8:	4996      	ldr	r1, [pc, #600]	; (8000b44 <main+0x3e0>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 ff06 	bl	80036fc <siprintf>
			  subLed0[1].ddram_name = 0x48;
 80008f0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80008f4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80008f8:	2248      	movs	r2, #72	; 0x48
 80008fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			  subLed0[1].ddram_text = 0x00;
 80008fe:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000902:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			  subLed0[1].state_item = PLUS;
 800090c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000910:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000914:	2207      	movs	r2, #7
 8000916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			  subLed0[1].PWM_lvl = 0;
 800091a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800091e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			  subLed0[1].subItem = &led[0];
 8000928:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800092c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000930:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000934:	649a      	str	r2, [r3, #72]	; 0x48
			  subLed0[1].parentalItem = &MainMenu;
 8000936:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800093a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800093e:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8000942:	64da      	str	r2, [r3, #76]	; 0x4c
			  subLed0[1].navigation_list = &subLed0[2];
 8000944:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000948:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800094c:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8000950:	3258      	adds	r2, #88	; 0x58
 8000952:	651a      	str	r2, [r3, #80]	; 0x50
			  subLed0[1].itemFunction = reWrite;
 8000954:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000958:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800095c:	4a7a      	ldr	r2, [pc, #488]	; (8000b48 <main+0x3e4>)
 800095e:	655a      	str	r2, [r3, #84]	; 0x54

  			  strcpy(subLed0[2].name, (const char*)" SET");
 8000960:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000964:	3358      	adds	r3, #88	; 0x58
 8000966:	4a7a      	ldr	r2, [pc, #488]	; (8000b50 <main+0x3ec>)
 8000968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800096c:	6018      	str	r0, [r3, #0]
 800096e:	3304      	adds	r3, #4
 8000970:	7019      	strb	r1, [r3, #0]
  			  strcpy(subLed0[2].text, led[0].name);
 8000972:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000976:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800097a:	3362      	adds	r3, #98	; 0x62
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f002 ff10 	bl	80037a4 <strcpy>
  			  subLed0[2].ddram_name = 0x0B;
 8000984:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000988:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800098c:	220b      	movs	r2, #11
 800098e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  			  subLed0[2].ddram_text = 0x00;
 8000992:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000996:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800099a:	2200      	movs	r2, #0
 800099c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  			  subLed0[2].state_item = SET_V;
 80009a0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80009a4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009a8:	2204      	movs	r2, #4
 80009aa:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  			  subLed0[2].PWM_lvl = 0;
 80009ae:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80009b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  			  subLed0[2].subItem = &led[0];
 80009bc:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80009c0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009c4:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80009c8:	675a      	str	r2, [r3, #116]	; 0x74
  			  subLed0[2].parentalItem = &MainMenu;
 80009ca:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80009ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009d2:	f507 725d 	add.w	r2, r7, #884	; 0x374
 80009d6:	679a      	str	r2, [r3, #120]	; 0x78
  			  subLed0[2].navigation_list = &subLed0[3];
 80009d8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80009dc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80009e0:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80009e4:	3284      	adds	r2, #132	; 0x84
 80009e6:	67da      	str	r2, [r3, #124]	; 0x7c

  			  strcpy(subLed0[3].name, (const char*)" BACK");
 80009e8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80009ec:	3384      	adds	r3, #132	; 0x84
 80009ee:	4a59      	ldr	r2, [pc, #356]	; (8000b54 <main+0x3f0>)
 80009f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f4:	6018      	str	r0, [r3, #0]
 80009f6:	3304      	adds	r3, #4
 80009f8:	8019      	strh	r1, [r3, #0]
  			  strcpy(subLed0[3].text, led[0].name);
 80009fa:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80009fe:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8000a02:	338e      	adds	r3, #142	; 0x8e
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fecc 	bl	80037a4 <strcpy>
  			  subLed0[3].ddram_name = 0x4B;
 8000a0c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000a10:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a14:	224b      	movs	r2, #75	; 0x4b
 8000a16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
  			  subLed0[3].ddram_text = 0x00;
 8000a1a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000a1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  			  subLed0[3].state_item = BACK;
 8000a28:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000a2c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a30:	2203      	movs	r2, #3
 8000a32:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  			  subLed0[3].PWM_lvl = 0;
 8000a36:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000a3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  			  subLed0[3].subItem = &led[0];
 8000a44:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000a48:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a4c:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000a50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  			  subLed0[3].parentalItem = &MainMenu;
 8000a54:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000a58:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a5c:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8000a60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  			  subLed0[3].navigation_list = &subLed0[0];
 8000a64:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000a68:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a6c:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8000a70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  			  subLed0[3].itemFunction = backFunc;
 8000a74:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000a78:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8000a7c:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <main+0x3f4>)
 8000a7e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac


  		  led[1].PWM_lvl = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
  		  sprintf(led[1].name, " Ld2:");
 8000a88:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000a8c:	332c      	adds	r3, #44	; 0x2c
 8000a8e:	4933      	ldr	r1, [pc, #204]	; (8000b5c <main+0x3f8>)
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fe33 	bl	80036fc <siprintf>
  		  sprintf(led[1].text, " Ld2:%d", led[1].PWM_lvl);
 8000a96:	f897 3307 	ldrb.w	r3, [r7, #775]	; 0x307
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000aa0:	3336      	adds	r3, #54	; 0x36
 8000aa2:	492f      	ldr	r1, [pc, #188]	; (8000b60 <main+0x3fc>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 fe29 	bl	80036fc <siprintf>
  		  led[1].ddram_name = 0x08;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	f887 3304 	strb.w	r3, [r7, #772]	; 0x304
  		  led[1].ddram_text = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 3305 	strb.w	r3, [r7, #773]	; 0x305
  		  led[1].state_item = CHOOSED_LED;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
  		  led[1].subItem = &subLed1[0];
 8000abc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000ac0:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
  		  led[1].parentalItem = &MainMenu;
 8000ac4:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8000ac8:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
  		  led[1].navigation_list = &led[2];
 8000acc:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000ad0:	3358      	adds	r3, #88	; 0x58
 8000ad2:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
  		  led[1].itemFunction = writeSubLedMenu;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <main+0x3d4>)
 8000ad8:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
  		  led[1].PWM_Reg = &(TIM3->CCR3);
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <main+0x400>)
 8000ade:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308

  		  	  strcpy(subLed1[0].name, (const char*)" -");
 8000ae2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <main+0x3dc>)
 8000ae8:	6812      	ldr	r2, [r2, #0]
 8000aea:	4611      	mov	r1, r2
 8000aec:	8019      	strh	r1, [r3, #0]
 8000aee:	3302      	adds	r3, #2
 8000af0:	0c12      	lsrs	r2, r2, #16
 8000af2:	701a      	strb	r2, [r3, #0]
  		  	  sprintf(subLed1[0].text, "%s", led[1].name);
 8000af4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000af8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8000afc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000b00:	330a      	adds	r3, #10
 8000b02:	4910      	ldr	r1, [pc, #64]	; (8000b44 <main+0x3e0>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fdf9 	bl	80036fc <siprintf>
			  subLed1[0].ddram_name = 0x44;
 8000b0a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000b0e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000b12:	2244      	movs	r2, #68	; 0x44
 8000b14:	751a      	strb	r2, [r3, #20]
			  subLed1[0].ddram_text = 0x00;
 8000b16:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000b1a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000b1e:	2200      	movs	r2, #0
 8000b20:	755a      	strb	r2, [r3, #21]
 8000b22:	e021      	b.n	8000b68 <main+0x404>
 8000b24:	20000088 	.word	0x20000088
 8000b28:	200000d0 	.word	0x200000d0
 8000b2c:	08001979 	.word	0x08001979
 8000b30:	0800406c 	.word	0x0800406c
 8000b34:	08004074 	.word	0x08004074
 8000b38:	080019cb 	.word	0x080019cb
 8000b3c:	40000034 	.word	0x40000034
 8000b40:	0800407c 	.word	0x0800407c
 8000b44:	08004080 	.word	0x08004080
 8000b48:	08001a41 	.word	0x08001a41
 8000b4c:	08004084 	.word	0x08004084
 8000b50:	08004088 	.word	0x08004088
 8000b54:	08004090 	.word	0x08004090
 8000b58:	08001af7 	.word	0x08001af7
 8000b5c:	08004098 	.word	0x08004098
 8000b60:	080040a0 	.word	0x080040a0
 8000b64:	4000043c 	.word	0x4000043c
			  subLed1[0].state_item = MINUS;
 8000b68:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000b6c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000b70:	2206      	movs	r2, #6
 8000b72:	759a      	strb	r2, [r3, #22]
			  subLed1[0].PWM_lvl = 0;
 8000b74:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000b78:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	75da      	strb	r2, [r3, #23]
			  subLed1[0].subItem = &led[1];
 8000b80:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000b84:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000b88:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000b8c:	322c      	adds	r2, #44	; 0x2c
 8000b8e:	61da      	str	r2, [r3, #28]
			  subLed1[0].parentalItem = &MainMenu;
 8000b90:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000b94:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000b98:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8000b9c:	621a      	str	r2, [r3, #32]
			  subLed1[0].navigation_list = &subLed1[1];
 8000b9e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000ba2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000ba6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8000baa:	322c      	adds	r2, #44	; 0x2c
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
			  subLed1[0].itemFunction = reWrite;
 8000bae:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000bb2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000bb6:	4ae8      	ldr	r2, [pc, #928]	; (8000f58 <main+0x7f4>)
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28

			  strcpy(subLed1[1].name, (const char*)" +");
 8000bba:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000bbe:	332c      	adds	r3, #44	; 0x2c
 8000bc0:	4ae6      	ldr	r2, [pc, #920]	; (8000f5c <main+0x7f8>)
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	8019      	strh	r1, [r3, #0]
 8000bc8:	3302      	adds	r3, #2
 8000bca:	0c12      	lsrs	r2, r2, #16
 8000bcc:	701a      	strb	r2, [r3, #0]
			  sprintf(subLed1[1].text, "%s", led[1].name);
 8000bce:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000bd2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8000bd6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000bda:	3336      	adds	r3, #54	; 0x36
 8000bdc:	49e0      	ldr	r1, [pc, #896]	; (8000f60 <main+0x7fc>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 fd8c 	bl	80036fc <siprintf>
			  subLed1[1].ddram_name = 0x48;
 8000be4:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000be8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000bec:	2248      	movs	r2, #72	; 0x48
 8000bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			  subLed1[1].ddram_text = 0x00;
 8000bf2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000bf6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			  subLed1[1].state_item = PLUS;
 8000c00:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000c04:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000c08:	2207      	movs	r2, #7
 8000c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			  subLed1[1].PWM_lvl = 0;
 8000c0e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000c12:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			  subLed1[1].subItem = &led[1];
 8000c1c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000c20:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000c24:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000c28:	322c      	adds	r2, #44	; 0x2c
 8000c2a:	649a      	str	r2, [r3, #72]	; 0x48
			  subLed1[1].parentalItem = &MainMenu;
 8000c2c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000c30:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000c34:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8000c38:	64da      	str	r2, [r3, #76]	; 0x4c
			  subLed1[1].navigation_list = &subLed1[2];
 8000c3a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000c3e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000c42:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8000c46:	3258      	adds	r2, #88	; 0x58
 8000c48:	651a      	str	r2, [r3, #80]	; 0x50
			  subLed1[1].itemFunction = reWrite;
 8000c4a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000c4e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000c52:	4ac1      	ldr	r2, [pc, #772]	; (8000f58 <main+0x7f4>)
 8000c54:	655a      	str	r2, [r3, #84]	; 0x54

			  strcpy(subLed1[2].name, (const char*)" SET");
 8000c56:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000c5a:	3358      	adds	r3, #88	; 0x58
 8000c5c:	4ac1      	ldr	r2, [pc, #772]	; (8000f64 <main+0x800>)
 8000c5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c62:	6018      	str	r0, [r3, #0]
 8000c64:	3304      	adds	r3, #4
 8000c66:	7019      	strb	r1, [r3, #0]
			  strcpy(subLed1[2].text, led[1].name);
 8000c68:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000c6c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8000c70:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000c74:	3362      	adds	r3, #98	; 0x62
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 fd93 	bl	80037a4 <strcpy>
			  subLed1[2].ddram_name = 0x0B;
 8000c7e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000c82:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000c86:	220b      	movs	r2, #11
 8000c88:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			  subLed1[2].ddram_text = 0x00;
 8000c8c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000c90:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			  subLed1[2].state_item = SET_V;
 8000c9a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000c9e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
			  subLed1[2].PWM_lvl = 0;
 8000ca8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000cac:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			  subLed1[2].subItem = &led[1];
 8000cb6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000cba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000cbe:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000cc2:	322c      	adds	r2, #44	; 0x2c
 8000cc4:	675a      	str	r2, [r3, #116]	; 0x74
			  subLed1[2].parentalItem = &MainMenu;
 8000cc6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000cca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000cce:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8000cd2:	679a      	str	r2, [r3, #120]	; 0x78
			  subLed1[2].navigation_list = &subLed1[3];
 8000cd4:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000cd8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000cdc:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8000ce0:	3284      	adds	r2, #132	; 0x84
 8000ce2:	67da      	str	r2, [r3, #124]	; 0x7c

			  strcpy(subLed1[3].name, (const char*)" BACK");
 8000ce4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000ce8:	3384      	adds	r3, #132	; 0x84
 8000cea:	4a9f      	ldr	r2, [pc, #636]	; (8000f68 <main+0x804>)
 8000cec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf0:	6018      	str	r0, [r3, #0]
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	8019      	strh	r1, [r3, #0]
			  strcpy(subLed1[3].text, led[1].name);
 8000cf6:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000cfa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8000cfe:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000d02:	338e      	adds	r3, #142	; 0x8e
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fd4c 	bl	80037a4 <strcpy>
			  subLed1[3].ddram_name = 0x4B;
 8000d0c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000d10:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000d14:	224b      	movs	r2, #75	; 0x4b
 8000d16:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			  subLed1[3].ddram_text = 0x00;
 8000d1a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000d1e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			  subLed1[3].state_item = BACK;
 8000d28:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000d2c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000d30:	2203      	movs	r2, #3
 8000d32:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			  subLed1[3].PWM_lvl = 0;
 8000d36:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000d3a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			  subLed1[3].subItem = &led[1];
 8000d44:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000d48:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000d4c:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000d50:	322c      	adds	r2, #44	; 0x2c
 8000d52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			  subLed1[3].parentalItem = &MainMenu;
 8000d56:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000d5a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000d5e:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8000d62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			  subLed1[3].navigation_list = &subLed1[0];
 8000d66:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000d6a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000d6e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8000d72:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			  subLed1[3].itemFunction = backFunc;
 8000d76:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000d7a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8000d7e:	4a7b      	ldr	r2, [pc, #492]	; (8000f6c <main+0x808>)
 8000d80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac


		  led[2].PWM_lvl = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
    	  sprintf(led[2].name, " Ld3:");
 8000d8a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000d8e:	3358      	adds	r3, #88	; 0x58
 8000d90:	4977      	ldr	r1, [pc, #476]	; (8000f70 <main+0x80c>)
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 fcb2 	bl	80036fc <siprintf>
		  sprintf(led[2].text, " Ld3:%d", led[2].PWM_lvl);
 8000d98:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000da2:	3362      	adds	r3, #98	; 0x62
 8000da4:	4973      	ldr	r1, [pc, #460]	; (8000f74 <main+0x810>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fca8 	bl	80036fc <siprintf>
  		  led[2].ddram_name = 0x40;
 8000dac:	2340      	movs	r3, #64	; 0x40
 8000dae:	f887 3330 	strb.w	r3, [r7, #816]	; 0x330
  		  led[2].ddram_text = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 3331 	strb.w	r3, [r7, #817]	; 0x331
  		  led[2].state_item = CHOOSED_LED;
 8000db8:	2305      	movs	r3, #5
 8000dba:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332
  		  led[2].subItem = &subLed2[0];
 8000dbe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dc2:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
  		  led[2].parentalItem = &MainMenu;
 8000dc6:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8000dca:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
  		  led[2].navigation_list = &led[3];
 8000dce:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000dd2:	3384      	adds	r3, #132	; 0x84
 8000dd4:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
  		  led[2].itemFunction = writeSubLedMenu;
 8000dd8:	4b67      	ldr	r3, [pc, #412]	; (8000f78 <main+0x814>)
 8000dda:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
  		  led[2].PWM_Reg = &(TIM3->CCR4);
 8000dde:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <main+0x818>)
 8000de0:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

  		  	  strcpy(subLed2[0].name, (const char*)" -");
 8000de4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000de8:	4a65      	ldr	r2, [pc, #404]	; (8000f80 <main+0x81c>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	4611      	mov	r1, r2
 8000dee:	8019      	strh	r1, [r3, #0]
 8000df0:	3302      	adds	r3, #2
 8000df2:	0c12      	lsrs	r2, r2, #16
 8000df4:	701a      	strb	r2, [r3, #0]
  		  	  sprintf(subLed2[0].text, "%s", led[2].name);
 8000df6:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000dfa:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000dfe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e02:	330a      	adds	r3, #10
 8000e04:	4956      	ldr	r1, [pc, #344]	; (8000f60 <main+0x7fc>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fc78 	bl	80036fc <siprintf>
			  subLed2[0].ddram_name = 0x44;
 8000e0c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000e10:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000e14:	2244      	movs	r2, #68	; 0x44
 8000e16:	751a      	strb	r2, [r3, #20]
			  subLed2[0].ddram_text = 0x00;
 8000e18:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000e1c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000e20:	2200      	movs	r2, #0
 8000e22:	755a      	strb	r2, [r3, #21]
			  subLed2[0].state_item = MINUS;
 8000e24:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000e28:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000e2c:	2206      	movs	r2, #6
 8000e2e:	759a      	strb	r2, [r3, #22]
			  subLed2[0].PWM_lvl = 0;
 8000e30:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000e34:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	75da      	strb	r2, [r3, #23]
			  subLed2[0].subItem = &led[2];
 8000e3c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000e40:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000e44:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000e48:	3258      	adds	r2, #88	; 0x58
 8000e4a:	61da      	str	r2, [r3, #28]
			  subLed2[0].parentalItem = &MainMenu;
 8000e4c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000e50:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000e54:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8000e58:	621a      	str	r2, [r3, #32]
			  subLed2[0].navigation_list = &subLed2[1];
 8000e5a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000e5e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000e62:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000e66:	322c      	adds	r2, #44	; 0x2c
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
			  subLed2[0].itemFunction = reWrite;
 8000e6a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000e6e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000e72:	4a39      	ldr	r2, [pc, #228]	; (8000f58 <main+0x7f4>)
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28

			  strcpy(subLed2[1].name, (const char*)" +");
 8000e76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e7a:	332c      	adds	r3, #44	; 0x2c
 8000e7c:	4a37      	ldr	r2, [pc, #220]	; (8000f5c <main+0x7f8>)
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	4611      	mov	r1, r2
 8000e82:	8019      	strh	r1, [r3, #0]
 8000e84:	3302      	adds	r3, #2
 8000e86:	0c12      	lsrs	r2, r2, #16
 8000e88:	701a      	strb	r2, [r3, #0]
			  sprintf(subLed2[1].text, "%s", led[2].name);
 8000e8a:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000e8e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000e92:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e96:	3336      	adds	r3, #54	; 0x36
 8000e98:	4931      	ldr	r1, [pc, #196]	; (8000f60 <main+0x7fc>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fc2e 	bl	80036fc <siprintf>
			  subLed2[1].ddram_name = 0x48;
 8000ea0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000ea4:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000ea8:	2248      	movs	r2, #72	; 0x48
 8000eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			  subLed2[1].ddram_text = 0x00;
 8000eae:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000eb2:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			  subLed2[1].state_item = PLUS;
 8000ebc:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000ec0:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			  subLed2[1].PWM_lvl = 0;
 8000eca:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000ece:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			  subLed2[1].subItem = &led[2];
 8000ed8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000edc:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000ee0:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000ee4:	3258      	adds	r2, #88	; 0x58
 8000ee6:	649a      	str	r2, [r3, #72]	; 0x48
			  subLed2[1].parentalItem = &MainMenu;
 8000ee8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000eec:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000ef0:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8000ef4:	64da      	str	r2, [r3, #76]	; 0x4c
			  subLed2[1].navigation_list = &subLed2[2];
 8000ef6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000efa:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000efe:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000f02:	3258      	adds	r2, #88	; 0x58
 8000f04:	651a      	str	r2, [r3, #80]	; 0x50
			  subLed2[1].itemFunction = reWrite;
 8000f06:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000f0a:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <main+0x7f4>)
 8000f10:	655a      	str	r2, [r3, #84]	; 0x54

			  strcpy(subLed2[2].name, (const char*)" SET");
 8000f12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f16:	3358      	adds	r3, #88	; 0x58
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <main+0x800>)
 8000f1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f1e:	6018      	str	r0, [r3, #0]
 8000f20:	3304      	adds	r3, #4
 8000f22:	7019      	strb	r1, [r3, #0]
			  strcpy(subLed2[2].text, led[2].name);
 8000f24:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000f28:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000f2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f30:	3362      	adds	r3, #98	; 0x62
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fc35 	bl	80037a4 <strcpy>
			  subLed2[2].ddram_name = 0x0B;
 8000f3a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000f3e:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000f42:	220b      	movs	r2, #11
 8000f44:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			  subLed2[2].ddram_text = 0x00;
 8000f48:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000f4c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8000f56:	e015      	b.n	8000f84 <main+0x820>
 8000f58:	08001a41 	.word	0x08001a41
 8000f5c:	08004084 	.word	0x08004084
 8000f60:	08004080 	.word	0x08004080
 8000f64:	08004088 	.word	0x08004088
 8000f68:	08004090 	.word	0x08004090
 8000f6c:	08001af7 	.word	0x08001af7
 8000f70:	080040a8 	.word	0x080040a8
 8000f74:	080040b0 	.word	0x080040b0
 8000f78:	080019cb 	.word	0x080019cb
 8000f7c:	40000440 	.word	0x40000440
 8000f80:	0800407c 	.word	0x0800407c
			  subLed2[2].state_item = SET_V;
 8000f84:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000f88:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
			  subLed2[2].PWM_lvl = 0;
 8000f92:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000f96:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			  subLed2[2].subItem = &led[2];
 8000fa0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000fa4:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000fa8:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000fac:	3258      	adds	r2, #88	; 0x58
 8000fae:	675a      	str	r2, [r3, #116]	; 0x74
			  subLed2[2].parentalItem = &MainMenu;
 8000fb0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000fb4:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000fb8:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8000fbc:	679a      	str	r2, [r3, #120]	; 0x78
			  subLed2[2].navigation_list = &subLed2[3];
 8000fbe:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000fc2:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000fc6:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000fca:	3284      	adds	r2, #132	; 0x84
 8000fcc:	67da      	str	r2, [r3, #124]	; 0x7c

			  strcpy(subLed2[3].name, (const char*)" BACK");
 8000fce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fd2:	3384      	adds	r3, #132	; 0x84
 8000fd4:	4ae7      	ldr	r2, [pc, #924]	; (8001374 <main+0xc10>)
 8000fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fda:	6018      	str	r0, [r3, #0]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	8019      	strh	r1, [r3, #0]
			  strcpy(subLed2[3].text, led[2].name);
 8000fe0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000fe4:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000fe8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fec:	338e      	adds	r3, #142	; 0x8e
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fbd7 	bl	80037a4 <strcpy>
			  subLed2[3].ddram_name = 0x4B;
 8000ff6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8000ffa:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8000ffe:	224b      	movs	r2, #75	; 0x4b
 8001000:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			  subLed2[3].ddram_text = 0x00;
 8001004:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001008:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			  subLed2[3].state_item = BACK;
 8001012:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001016:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 800101a:	2203      	movs	r2, #3
 800101c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			  subLed2[3].PWM_lvl = 0;
 8001020:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001024:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001028:	2200      	movs	r2, #0
 800102a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			  subLed2[3].subItem = &led[2];
 800102e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001032:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001036:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800103a:	3258      	adds	r2, #88	; 0x58
 800103c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			  subLed2[3].parentalItem = &MainMenu;
 8001040:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001044:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001048:	f507 725d 	add.w	r2, r7, #884	; 0x374
 800104c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			  subLed2[3].navigation_list = &subLed2[0];
 8001050:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001054:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001058:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800105c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			  subLed2[3].itemFunction = backFunc;
 8001060:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001064:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8001068:	4ac3      	ldr	r2, [pc, #780]	; (8001378 <main+0xc14>)
 800106a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac


		  led[3].PWM_lvl = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
		  sprintf(led[3].name, " Ld4:");
 8001074:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001078:	3384      	adds	r3, #132	; 0x84
 800107a:	49c0      	ldr	r1, [pc, #768]	; (800137c <main+0xc18>)
 800107c:	4618      	mov	r0, r3
 800107e:	f002 fb3d 	bl	80036fc <siprintf>
		  sprintf(led[3].text, " Ld4:%d", led[3].PWM_lvl);
 8001082:	f897 335f 	ldrb.w	r3, [r7, #863]	; 0x35f
 8001086:	461a      	mov	r2, r3
 8001088:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800108c:	338e      	adds	r3, #142	; 0x8e
 800108e:	49bc      	ldr	r1, [pc, #752]	; (8001380 <main+0xc1c>)
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fb33 	bl	80036fc <siprintf>
  		  led[3].ddram_name = 0x48;
 8001096:	2348      	movs	r3, #72	; 0x48
 8001098:	f887 335c 	strb.w	r3, [r7, #860]	; 0x35c
  		  led[3].ddram_text = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 335d 	strb.w	r3, [r7, #861]	; 0x35d
  		  led[3].state_item = CHOOSED_LED;
 80010a2:	2305      	movs	r3, #5
 80010a4:	f887 335e 	strb.w	r3, [r7, #862]	; 0x35e
  		  led[3].subItem = &subLed3[0];
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
  		  led[3].parentalItem = &MainMenu;
 80010ae:	f507 735d 	add.w	r3, r7, #884	; 0x374
 80010b2:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
  		  led[3].navigation_list = &led[0];
 80010b6:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80010ba:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
  		  led[3].itemFunction = writeSubLedMenu;
 80010be:	4bb1      	ldr	r3, [pc, #708]	; (8001384 <main+0xc20>)
 80010c0:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
  		  led[3].PWM_Reg = &(TIM3->CCR1);
 80010c4:	4bb0      	ldr	r3, [pc, #704]	; (8001388 <main+0xc24>)
 80010c6:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360

  		  	  strcpy(subLed3[0].name, (const char*)" -");
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4aaf      	ldr	r2, [pc, #700]	; (800138c <main+0xc28>)
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	4611      	mov	r1, r2
 80010d2:	8019      	strh	r1, [r3, #0]
 80010d4:	3302      	adds	r3, #2
 80010d6:	0c12      	lsrs	r2, r2, #16
 80010d8:	701a      	strb	r2, [r3, #0]
			  sprintf(subLed3[0].text, "%s", led[3].name);
 80010da:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80010de:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	330a      	adds	r3, #10
 80010e6:	49aa      	ldr	r1, [pc, #680]	; (8001390 <main+0xc2c>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fb07 	bl	80036fc <siprintf>
			  subLed3[0].ddram_name = 0x44;
 80010ee:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80010f2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80010f6:	2244      	movs	r2, #68	; 0x44
 80010f8:	751a      	strb	r2, [r3, #20]
			  subLed3[0].ddram_text = 0x00;
 80010fa:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80010fe:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001102:	2200      	movs	r2, #0
 8001104:	755a      	strb	r2, [r3, #21]
			  subLed3[0].state_item = MINUS;
 8001106:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800110a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800110e:	2206      	movs	r2, #6
 8001110:	759a      	strb	r2, [r3, #22]
			  subLed3[0].PWM_lvl = 0;
 8001112:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001116:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800111a:	2200      	movs	r2, #0
 800111c:	75da      	strb	r2, [r3, #23]
			  subLed3[0].subItem = &led[3];
 800111e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001122:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001126:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800112a:	3284      	adds	r2, #132	; 0x84
 800112c:	61da      	str	r2, [r3, #28]
			  subLed3[0].parentalItem = &MainMenu;
 800112e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001132:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001136:	f507 725d 	add.w	r2, r7, #884	; 0x374
 800113a:	621a      	str	r2, [r3, #32]
			  subLed3[0].navigation_list = &subLed3[1];
 800113c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001140:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001144:	1d3a      	adds	r2, r7, #4
 8001146:	322c      	adds	r2, #44	; 0x2c
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
			  subLed3[0].itemFunction = reWrite;
 800114a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800114e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001152:	4a90      	ldr	r2, [pc, #576]	; (8001394 <main+0xc30>)
 8001154:	629a      	str	r2, [r3, #40]	; 0x28

			  strcpy(subLed3[1].name, (const char*)" +");
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	332c      	adds	r3, #44	; 0x2c
 800115a:	4a8f      	ldr	r2, [pc, #572]	; (8001398 <main+0xc34>)
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	4611      	mov	r1, r2
 8001160:	8019      	strh	r1, [r3, #0]
 8001162:	3302      	adds	r3, #2
 8001164:	0c12      	lsrs	r2, r2, #16
 8001166:	701a      	strb	r2, [r3, #0]
			  sprintf(subLed3[1].text, "%s", led[3].name);
 8001168:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800116c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	3336      	adds	r3, #54	; 0x36
 8001174:	4986      	ldr	r1, [pc, #536]	; (8001390 <main+0xc2c>)
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fac0 	bl	80036fc <siprintf>
			  subLed3[1].ddram_name = 0x48;
 800117c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001180:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001184:	2248      	movs	r2, #72	; 0x48
 8001186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			  subLed3[1].ddram_text = 0x00;
 800118a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800118e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			  subLed3[1].state_item = PLUS;
 8001198:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800119c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80011a0:	2207      	movs	r2, #7
 80011a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			  subLed3[1].PWM_lvl = 0;
 80011a6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80011aa:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			  subLed3[1].subItem = &led[3];
 80011b4:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80011b8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80011bc:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80011c0:	3284      	adds	r2, #132	; 0x84
 80011c2:	649a      	str	r2, [r3, #72]	; 0x48
			  subLed3[1].parentalItem = &MainMenu;
 80011c4:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80011c8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80011cc:	f507 725d 	add.w	r2, r7, #884	; 0x374
 80011d0:	64da      	str	r2, [r3, #76]	; 0x4c
			  subLed3[1].navigation_list = &subLed3[2];
 80011d2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80011d6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80011da:	1d3a      	adds	r2, r7, #4
 80011dc:	3258      	adds	r2, #88	; 0x58
 80011de:	651a      	str	r2, [r3, #80]	; 0x50
			  subLed3[1].itemFunction = reWrite;
 80011e0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80011e4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80011e8:	4a6a      	ldr	r2, [pc, #424]	; (8001394 <main+0xc30>)
 80011ea:	655a      	str	r2, [r3, #84]	; 0x54

			  strcpy(subLed3[2].name, (const char*)" SET");
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	3358      	adds	r3, #88	; 0x58
 80011f0:	4a6a      	ldr	r2, [pc, #424]	; (800139c <main+0xc38>)
 80011f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f6:	6018      	str	r0, [r3, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	7019      	strb	r1, [r3, #0]
			  strcpy(subLed3[2].text, led[3].name);
 80011fc:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001200:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	3362      	adds	r3, #98	; 0x62
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f002 faca 	bl	80037a4 <strcpy>
			  subLed3[2].ddram_name = 0x0B;
 8001210:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001214:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001218:	220b      	movs	r2, #11
 800121a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			  subLed3[2].ddram_text = 0x00;
 800121e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001222:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001226:	2200      	movs	r2, #0
 8001228:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			  subLed3[2].state_item = SET_V;
 800122c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001230:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001234:	2204      	movs	r2, #4
 8001236:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
			  subLed3[2].PWM_lvl = 0;
 800123a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800123e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001242:	2200      	movs	r2, #0
 8001244:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
			  subLed3[2].subItem = &led[3];
 8001248:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800124c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001250:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8001254:	3284      	adds	r2, #132	; 0x84
 8001256:	675a      	str	r2, [r3, #116]	; 0x74
			  subLed3[2].parentalItem = &MainMenu;
 8001258:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800125c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001260:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8001264:	679a      	str	r2, [r3, #120]	; 0x78
			  subLed3[2].navigation_list = &subLed3[3];
 8001266:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800126a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800126e:	1d3a      	adds	r2, r7, #4
 8001270:	3284      	adds	r2, #132	; 0x84
 8001272:	67da      	str	r2, [r3, #124]	; 0x7c

			  strcpy(subLed3[3].name, (const char*)" BACK");
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	3384      	adds	r3, #132	; 0x84
 8001278:	4a3e      	ldr	r2, [pc, #248]	; (8001374 <main+0xc10>)
 800127a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127e:	6018      	str	r0, [r3, #0]
 8001280:	3304      	adds	r3, #4
 8001282:	8019      	strh	r1, [r3, #0]
			  strcpy(subLed3[3].text, led[3].name);
 8001284:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001288:	f103 0284 	add.w	r2, r3, #132	; 0x84
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	338e      	adds	r3, #142	; 0x8e
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fa86 	bl	80037a4 <strcpy>
			  subLed3[3].ddram_name = 0x4B;
 8001298:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800129c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80012a0:	224b      	movs	r2, #75	; 0x4b
 80012a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			  subLed3[3].ddram_text = 0x00;
 80012a6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012aa:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			  subLed3[3].state_item = BACK;
 80012b4:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012b8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80012bc:	2203      	movs	r2, #3
 80012be:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			  subLed3[3].PWM_lvl = 0;
 80012c2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012c6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
			  subLed3[3].subItem = &led[3];
 80012d0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012d4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80012d8:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80012dc:	3284      	adds	r2, #132	; 0x84
 80012de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			  subLed3[3].parentalItem = &MainMenu;
 80012e2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012e6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80012ea:	f507 725d 	add.w	r2, r7, #884	; 0x374
 80012ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			  subLed3[3].navigation_list = &subLed3[0];
 80012f2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012f6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80012fa:	1d3a      	adds	r2, r7, #4
 80012fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			  subLed3[3].itemFunction = backFunc;
 8001300:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001304:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <main+0xc14>)
 800130a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac





  MainMenu.itemFunction(led, NULL);
 800130e:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8001312:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8001316:	2100      	movs	r1, #0
 8001318:	4610      	mov	r0, r2
 800131a:	4798      	blx	r3

  const struct MenuItem *current_item = &led[0],
 800131c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001320:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
		  	  	        *previous_item = NULL;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

  uint8_t PWM = 70;
 800132a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800132e:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 8001332:	2246      	movs	r2, #70	; 0x46
 8001334:	701a      	strb	r2, [r3, #0]

  setCursor(current_item);
 8001336:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800133a:	f000 fbbc 	bl	8001ab6 <setCursor>
  TIM3->CCR3 = 0;
  TIM3->CCR4 = 100;
*/
  while (1)
  {
	 switch(button)
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <main+0xc3c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d02f      	beq.n	80013a6 <main+0xc42>
 8001346:	2b02      	cmp	r3, #2
 8001348:	d1f9      	bne.n	800133e <main+0xbda>
	 {
	 case CHANGE:
		 button = 0;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <main+0xc3c>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]

		 previous_item = current_item;
 8001350:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001354:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

		 switchCursor(previous_item, previous_item->navigation_list);
 8001358:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	f8d7 03a0 	ldr.w	r0, [r7, #928]	; 0x3a0
 8001364:	f000 fb88 	bl	8001a78 <switchCursor>

		 current_item = previous_item->navigation_list;
 8001368:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8001372:	e017      	b.n	80013a4 <main+0xc40>
 8001374:	08004090 	.word	0x08004090
 8001378:	08001af7 	.word	0x08001af7
 800137c:	080040b8 	.word	0x080040b8
 8001380:	080040c0 	.word	0x080040c0
 8001384:	080019cb 	.word	0x080019cb
 8001388:	40000434 	.word	0x40000434
 800138c:	0800407c 	.word	0x0800407c
 8001390:	08004080 	.word	0x08004080
 8001394:	08001a41 	.word	0x08001a41
 8001398:	08004084 	.word	0x08004084
 800139c:	08004088 	.word	0x08004088
 80013a0:	20000118 	.word	0x20000118

		 break;
 80013a4:	e0c7      	b.n	8001536 <main+0xdd2>

	 case SELECT:
		 button = 0;
 80013a6:	4b64      	ldr	r3, [pc, #400]	; (8001538 <main+0xdd4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

		 switch(current_item->state_item)
 80013ac:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80013b0:	7d9b      	ldrb	r3, [r3, #22]
 80013b2:	3b03      	subs	r3, #3
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d8c2      	bhi.n	800133e <main+0xbda>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <main+0xc5c>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	0800145f 	.word	0x0800145f
 80013c4:	080013fd 	.word	0x080013fd
 80013c8:	080013d5 	.word	0x080013d5
 80013cc:	08001477 	.word	0x08001477
 80013d0:	080014df 	.word	0x080014df
		 {
		 case CHOOSED_LED:

			 PWM = current_item->PWM_lvl;
 80013d4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80013d8:	7dda      	ldrb	r2, [r3, #23]
 80013da:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80013de:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 80013e2:	701a      	strb	r2, [r3, #0]

			 current_item = current_item->itemFunction(current_item->subItem, NULL);
 80013e4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80013ee:	69d2      	ldr	r2, [r2, #28]
 80013f0:	2100      	movs	r1, #0
 80013f2:	4610      	mov	r0, r2
 80013f4:	4798      	blx	r3
 80013f6:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
	//		 PWM = current_item->PWM_lvl;

			 break;
 80013fa:	e09c      	b.n	8001536 <main+0xdd2>

		 case SET_V:

			 current_item->subItem->PWM_lvl = PWM;
 80013fc:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f507 726a 	add.w	r2, r7, #936	; 0x3a8
 8001406:	f2a2 32a5 	subw	r2, r2, #933	; 0x3a5
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	75da      	strb	r2, [r3, #23]

			 *(current_item->subItem->PWM_Reg) = ((4000 * current_item->subItem->PWM_lvl) / 100);
 800140e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	7ddb      	ldrb	r3, [r3, #23]
 8001416:	461a      	mov	r2, r3
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	461a      	mov	r2, r3
 8001422:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	601a      	str	r2, [r3, #0]
//			 current_item->subItem->PWM_Reg = ((4000 * current_item->subItem->PWM_lvl) / 100);

			 sprintf(current_item->subItem->text, "%s%d", current_item->subItem->name, current_item->subItem->PWM_lvl);
 800142c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f103 000a 	add.w	r0, r3, #10
 8001436:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	461a      	mov	r2, r3
 800143e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	7ddb      	ldrb	r3, [r3, #23]
 8001446:	493d      	ldr	r1, [pc, #244]	; (800153c <main+0xdd8>)
 8001448:	f002 f958 	bl	80036fc <siprintf>

//			 current_item = current_item->itemFunction(current_item->parentalItem, NULL);
			 current_item = backFunc(current_item->parentalItem);
 800144c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fb4f 	bl	8001af6 <backFunc>
 8001458:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4


			 break;
 800145c:	e06b      	b.n	8001536 <main+0xdd2>

		 case BACK:

			 current_item = current_item->itemFunction(current_item->parentalItem, NULL);
 800145e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8001468:	6a12      	ldr	r2, [r2, #32]
 800146a:	2100      	movs	r1, #0
 800146c:	4610      	mov	r0, r2
 800146e:	4798      	blx	r3
 8001470:	f8c7 03a4 	str.w	r0, [r7, #932]	; 0x3a4
//			 current_item = backFunc(current_item->parentalItem);

			 break;
 8001474:	e05f      	b.n	8001536 <main+0xdd2>

		 case MINUS:

			 if(PWM == 100)
 8001476:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800147a:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b64      	cmp	r3, #100	; 0x64
 8001482:	d102      	bne.n	800148a <main+0xd26>
			 {
				 clearChar(0x07);
 8001484:	2007      	movs	r0, #7
 8001486:	f000 fb26 	bl	8001ad6 <clearChar>
			 }

			 PWM -= 5;
 800148a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800148e:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3b05      	subs	r3, #5
 8001496:	b2da      	uxtb	r2, r3
 8001498:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800149c:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 80014a0:	701a      	strb	r2, [r3, #0]

			 if(PWM > 100)
 80014a2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80014a6:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b64      	cmp	r3, #100	; 0x64
 80014ae:	d905      	bls.n	80014bc <main+0xd58>
			 {
				 PWM = 0;
 80014b0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80014b4:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
			 }

			 reWrite(current_item, &PWM);
 80014bc:	1cfb      	adds	r3, r7, #3
 80014be:	4619      	mov	r1, r3
 80014c0:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 80014c4:	f000 fabc 	bl	8001a40 <reWrite>

			 if(PWM < 10)
 80014c8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80014cc:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b09      	cmp	r3, #9
 80014d4:	d82d      	bhi.n	8001532 <main+0xdce>
			 {
				 clearChar(0x06);
 80014d6:	2006      	movs	r0, #6
 80014d8:	f000 fafd 	bl	8001ad6 <clearChar>
			 }

			 break;
 80014dc:	e029      	b.n	8001532 <main+0xdce>

		 case PLUS:

			 if(PWM == 0)
 80014de:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80014e2:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <main+0xd8e>
			 {
				 clearChar(0x06);
 80014ec:	2006      	movs	r0, #6
 80014ee:	f000 faf2 	bl	8001ad6 <clearChar>
			 }

			 PWM += 5;
 80014f2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80014f6:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	3305      	adds	r3, #5
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001504:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 8001508:	701a      	strb	r2, [r3, #0]

			 if(PWM > 100)
 800150a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800150e:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d905      	bls.n	8001524 <main+0xdc0>
			 {
				 PWM = 100;
 8001518:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800151c:	f2a3 33a5 	subw	r3, r3, #933	; 0x3a5
 8001520:	2264      	movs	r2, #100	; 0x64
 8001522:	701a      	strb	r2, [r3, #0]
			 }

			 reWrite(current_item, &PWM);
 8001524:	1cfb      	adds	r3, r7, #3
 8001526:	4619      	mov	r1, r3
 8001528:	f8d7 03a4 	ldr.w	r0, [r7, #932]	; 0x3a4
 800152c:	f000 fa88 	bl	8001a40 <reWrite>

			 break;
 8001530:	e001      	b.n	8001536 <main+0xdd2>
			 break;
 8001532:	bf00      	nop
 8001534:	e703      	b.n	800133e <main+0xbda>
	 switch(button)
 8001536:	e702      	b.n	800133e <main+0xbda>
 8001538:	20000118 	.word	0x20000118
 800153c:	080040c8 	.word	0x080040c8

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b094      	sub	sp, #80	; 0x50
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	2230      	movs	r2, #48	; 0x30
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f002 f8f4 	bl	800373c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <SystemClock_Config+0xd0>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	4a28      	ldr	r2, [pc, #160]	; (8001610 <SystemClock_Config+0xd0>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <SystemClock_Config+0xd0>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <SystemClock_Config+0xd4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800158c:	4a21      	ldr	r2, [pc, #132]	; (8001614 <SystemClock_Config+0xd4>)
 800158e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <SystemClock_Config+0xd4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a8:	2310      	movs	r3, #16
 80015aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ac:	2302      	movs	r3, #2
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015b4:	2310      	movs	r3, #16
 80015b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015be:	2304      	movs	r3, #4
 80015c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015c2:	2307      	movs	r3, #7
 80015c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 ffd0 	bl	8002570 <HAL_RCC_OscConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015d6:	f000 f9b9 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2302      	movs	r3, #2
 80015e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2102      	movs	r1, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 fa32 	bl	8002a60 <HAL_RCC_ClockConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001602:	f000 f9a3 	bl	800194c <Error_Handler>
  }
}
 8001606:	bf00      	nop
 8001608:	3750      	adds	r7, #80	; 0x50
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000

08001618 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <MX_TIM2_Init+0xac>)
 800163c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001640:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <MX_TIM2_Init+0xac>)
 8001644:	2214      	movs	r2, #20
 8001646:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <MX_TIM2_Init+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <MX_TIM2_Init+0xac>)
 8001650:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001654:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_TIM2_Init+0xac>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <MX_TIM2_Init+0xac>)
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <MX_TIM2_Init+0xac>)
 8001664:	f001 fbe8 	bl	8002e38 <HAL_TIM_PWM_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800166e:	f000 f96d 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800167a:	f107 0320 	add.w	r3, r7, #32
 800167e:	4619      	mov	r1, r3
 8001680:	4810      	ldr	r0, [pc, #64]	; (80016c4 <MX_TIM2_Init+0xac>)
 8001682:	f001 ffcd 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800168c:	f000 f95e 	bl	800194c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001690:	2360      	movs	r3, #96	; 0x60
 8001692:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <MX_TIM2_Init+0xac>)
 80016a8:	f001 fcc6 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016b2:	f000 f94b 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016b6:	4803      	ldr	r0, [pc, #12]	; (80016c4 <MX_TIM2_Init+0xac>)
 80016b8:	f000 fa8c 	bl	8001bd4 <HAL_TIM_MspPostInit>

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000088 	.word	0x20000088

080016c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
 80016e6:	615a      	str	r2, [r3, #20]
 80016e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ea:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <MX_TIM3_Init+0xd8>)
 80016ec:	4a2d      	ldr	r2, [pc, #180]	; (80017a4 <MX_TIM3_Init+0xdc>)
 80016ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <MX_TIM3_Init+0xd8>)
 80016f2:	2214      	movs	r2, #20
 80016f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <MX_TIM3_Init+0xd8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <MX_TIM3_Init+0xd8>)
 80016fe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001702:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <MX_TIM3_Init+0xd8>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <MX_TIM3_Init+0xd8>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001710:	4823      	ldr	r0, [pc, #140]	; (80017a0 <MX_TIM3_Init+0xd8>)
 8001712:	f001 fb91 	bl	8002e38 <HAL_TIM_PWM_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800171c:	f000 f916 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001728:	f107 0320 	add.w	r3, r7, #32
 800172c:	4619      	mov	r1, r3
 800172e:	481c      	ldr	r0, [pc, #112]	; (80017a0 <MX_TIM3_Init+0xd8>)
 8001730:	f001 ff76 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800173a:	f000 f907 	bl	800194c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173e:	2360      	movs	r3, #96	; 0x60
 8001740:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_TIM3_Init+0xd8>)
 8001756:	f001 fc6f 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001760:	f000 f8f4 	bl	800194c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2208      	movs	r2, #8
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_TIM3_Init+0xd8>)
 800176c:	f001 fc64 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001776:	f000 f8e9 	bl	800194c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	220c      	movs	r2, #12
 800177e:	4619      	mov	r1, r3
 8001780:	4807      	ldr	r0, [pc, #28]	; (80017a0 <MX_TIM3_Init+0xd8>)
 8001782:	f001 fc59 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 800178c:	f000 f8de 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <MX_TIM3_Init+0xd8>)
 8001792:	f000 fa1f 	bl	8001bd4 <HAL_TIM_MspPostInit>

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000d0 	.word	0x200000d0
 80017a4:	40000400 	.word	0x40000400

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b5e      	ldr	r3, [pc, #376]	; (800193c <MX_GPIO_Init+0x194>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a5d      	ldr	r2, [pc, #372]	; (800193c <MX_GPIO_Init+0x194>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b5b      	ldr	r3, [pc, #364]	; (800193c <MX_GPIO_Init+0x194>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b57      	ldr	r3, [pc, #348]	; (800193c <MX_GPIO_Init+0x194>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a56      	ldr	r2, [pc, #344]	; (800193c <MX_GPIO_Init+0x194>)
 80017e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b54      	ldr	r3, [pc, #336]	; (800193c <MX_GPIO_Init+0x194>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b50      	ldr	r3, [pc, #320]	; (800193c <MX_GPIO_Init+0x194>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a4f      	ldr	r2, [pc, #316]	; (800193c <MX_GPIO_Init+0x194>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b4d      	ldr	r3, [pc, #308]	; (800193c <MX_GPIO_Init+0x194>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <MX_GPIO_Init+0x194>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a48      	ldr	r2, [pc, #288]	; (800193c <MX_GPIO_Init+0x194>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b46      	ldr	r3, [pc, #280]	; (800193c <MX_GPIO_Init+0x194>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 800182e:	2200      	movs	r2, #0
 8001830:	f240 71f2 	movw	r1, #2034	; 0x7f2
 8001834:	4842      	ldr	r0, [pc, #264]	; (8001940 <MX_GPIO_Init+0x198>)
 8001836:	f000 fe43 	bl	80024c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	4841      	ldr	r0, [pc, #260]	; (8001944 <MX_GPIO_Init+0x19c>)
 8001840:	f000 fe3e 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2138      	movs	r1, #56	; 0x38
 8001848:	483f      	ldr	r0, [pc, #252]	; (8001948 <MX_GPIO_Init+0x1a0>)
 800184a:	f000 fe39 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800184e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001854:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4837      	ldr	r0, [pc, #220]	; (8001944 <MX_GPIO_Init+0x19c>)
 8001866:	f000 fca7 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800186a:	2303      	movs	r3, #3
 800186c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4831      	ldr	r0, [pc, #196]	; (8001944 <MX_GPIO_Init+0x19c>)
 8001880:	f000 fc9a 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 LD2_Pin PA6
                           PA7 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|LD2_Pin|GPIO_PIN_6
 8001884:	f240 73f2 	movw	r3, #2034	; 0x7f2
 8001888:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4828      	ldr	r0, [pc, #160]	; (8001940 <MX_GPIO_Init+0x198>)
 800189e:	f000 fc8b 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4822      	ldr	r0, [pc, #136]	; (8001944 <MX_GPIO_Init+0x19c>)
 80018ba:	f000 fc7d 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018be:	2338      	movs	r3, #56	; 0x38
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	481c      	ldr	r0, [pc, #112]	; (8001948 <MX_GPIO_Init+0x1a0>)
 80018d6:	f000 fc6f 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	4816      	ldr	r0, [pc, #88]	; (8001948 <MX_GPIO_Init+0x1a0>)
 80018f0:	f000 fc62 	bl	80021b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	2006      	movs	r0, #6
 80018fa:	f000 fc26 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018fe:	2006      	movs	r0, #6
 8001900:	f000 fc3f 	bl	8002182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	2007      	movs	r0, #7
 800190a:	f000 fc1e 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800190e:	2007      	movs	r0, #7
 8001910:	f000 fc37 	bl	8002182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	2017      	movs	r0, #23
 800191a:	f000 fc16 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800191e:	2017      	movs	r0, #23
 8001920:	f000 fc2f 	bl	8002182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2028      	movs	r0, #40	; 0x28
 800192a:	f000 fc0e 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800192e:	2028      	movs	r0, #40	; 0x28
 8001930:	f000 fc27 	bl	8002182 <HAL_NVIC_EnableIRQ>

}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	40020000 	.word	0x40020000
 8001944:	40020800 	.word	0x40020800
 8001948:	40020400 	.word	0x40020400

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>

08001956 <writeText>:

/*############################################################################################################*/


void writeText(uint8_t *name_item, uint8_t ddram_item)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	460b      	mov	r3, r1
 8001960:	70fb      	strb	r3, [r7, #3]
	setDDRAM(ddram_item);
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fe95 	bl	8000694 <setDDRAM>

	sendText(name_item);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7fe fe7c 	bl	8000668 <sendText>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <writeMainMenu>:

/*############################################################################################################*/

const struct MenuItem *writeMainMenu(const struct MenuItem *items)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	clearDisplay();
 8001980:	f7fe fe98 	bl	80006b4 <clearDisplay>

	for(uint8_t count = 0; count < 4; count++)
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
 8001988:	e014      	b.n	80019b4 <writeMainMenu+0x3c>
	{
		writeText(items[count].text, items[count].ddram_name);
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	222c      	movs	r2, #44	; 0x2c
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	f103 000a 	add.w	r0, r3, #10
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	222c      	movs	r2, #44	; 0x2c
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	7d1b      	ldrb	r3, [r3, #20]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff ffd4 	bl	8001956 <writeText>
	for(uint8_t count = 0; count < 4; count++)
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	3301      	adds	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d9e7      	bls.n	800198a <writeMainMenu+0x12>
	}

	setCursor(items);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f87b 	bl	8001ab6 <setCursor>

	return items;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <writeSubLedMenu>:

const struct MenuItem *writeSubLedMenu(const struct MenuItem *items)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	clearDisplay();
 80019d2:	f7fe fe6f 	bl	80006b4 <clearDisplay>

	for(uint8_t count = 0; count < 4; count++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	e025      	b.n	8001a28 <writeSubLedMenu+0x5e>
	{
			writeText(items[count].name, items[count].ddram_name);
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	222c      	movs	r2, #44	; 0x2c
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	222c      	movs	r2, #44	; 0x2c
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	7d1b      	ldrb	r3, [r3, #20]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7ff ffac 	bl	8001956 <writeText>
			writeText(items[count].text, items[count].ddram_text);
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	222c      	movs	r2, #44	; 0x2c
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	f103 000a 	add.w	r0, r3, #10
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	222c      	movs	r2, #44	; 0x2c
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	7d5b      	ldrb	r3, [r3, #21]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff ff9a 	bl	8001956 <writeText>
	for(uint8_t count = 0; count < 4; count++)
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	3301      	adds	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d9d6      	bls.n	80019dc <writeSubLedMenu+0x12>
	}

	setCursor(items);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f841 	bl	8001ab6 <setCursor>

	return items;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <reWrite>:

void reWrite(const struct MenuItem const *items, const uint8_t *PWM)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	sprintf(items->text, "%s%d", items->subItem->name, *PWM);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f103 000a 	add.w	r0, r3, #10
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	461a      	mov	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	4906      	ldr	r1, [pc, #24]	; (8001a74 <reWrite+0x34>)
 8001a5c:	f001 fe4e 	bl	80036fc <siprintf>
	writeText(items->text, 0x00);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	330a      	adds	r3, #10
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff75 	bl	8001956 <writeText>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	080040d0 	.word	0x080040d0

08001a78 <switchCursor>:

/*############################################################################################################*/

void switchCursor(const struct MenuItem *items_prev, const struct MenuItem *item_curr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	clearCursor(items_prev);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f807 	bl	8001a96 <clearCursor>
	setCursor(item_curr);
 8001a88:	6838      	ldr	r0, [r7, #0]
 8001a8a:	f000 f814 	bl	8001ab6 <setCursor>

}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <clearCursor>:

void clearCursor(const struct MenuItem *item_clr)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
	setDDRAM(item_clr->ddram_name);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7d1b      	ldrb	r3, [r3, #20]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fdf6 	bl	8000694 <setDDRAM>

	sendData(' ');
 8001aa8:	2020      	movs	r0, #32
 8001aaa:	f7fe fdad 	bl	8000608 <sendData>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <setCursor>:

void setCursor(const struct MenuItem *item_st)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]

	setDDRAM(item_st->ddram_name);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7d1b      	ldrb	r3, [r3, #20]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fde6 	bl	8000694 <setDDRAM>

	sendData('>');
 8001ac8:	203e      	movs	r0, #62	; 0x3e
 8001aca:	f7fe fd9d 	bl	8000608 <sendData>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <clearChar>:

void clearChar(uint8_t clear_ddram)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
	setDDRAM(clear_ddram);
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fdd6 	bl	8000694 <setDDRAM>

	sendData(' ');
 8001ae8:	2020      	movs	r0, #32
 8001aea:	f7fe fd8d 	bl	8000608 <sendData>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <backFunc>:

/*############################################################################################################*/

const struct MenuItem *backFunc(const struct MenuItem *back_item)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	return back_item->itemFunction(back_item->subItem, NULL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	69d2      	ldr	r2, [r2, #28]
 8001b06:	2100      	movs	r1, #0
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4798      	blx	r3
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_MspInit+0x4c>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b56:	2007      	movs	r0, #7
 8001b58:	f000 faec 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800

08001b68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b78:	d10e      	bne.n	8001b98 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_TIM_PWM_MspInit+0x64>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <HAL_TIM_PWM_MspInit+0x64>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_TIM_PWM_MspInit+0x64>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b96:	e012      	b.n	8001bbe <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <HAL_TIM_PWM_MspInit+0x68>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10d      	bne.n	8001bbe <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_TIM_PWM_MspInit+0x64>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_TIM_PWM_MspInit+0x64>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_TIM_PWM_MspInit+0x64>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40000400 	.word	0x40000400

08001bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d11e      	bne.n	8001c34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_TIM_MspPostInit+0xec>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a30      	ldr	r2, [pc, #192]	; (8001cc0 <HAL_TIM_MspPostInit+0xec>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_TIM_MspPostInit+0xec>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c12:	2301      	movs	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c22:	2301      	movs	r3, #1
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4825      	ldr	r0, [pc, #148]	; (8001cc4 <HAL_TIM_MspPostInit+0xf0>)
 8001c2e:	f000 fac3 	bl	80021b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c32:	e040      	b.n	8001cb6 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_TIM_MspPostInit+0xf4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d13b      	bne.n	8001cb6 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_TIM_MspPostInit+0xec>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <HAL_TIM_MspPostInit+0xec>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_TIM_MspPostInit+0xec>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_TIM_MspPostInit+0xec>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_TIM_MspPostInit+0xec>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_TIM_MspPostInit+0xec>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c76:	2303      	movs	r3, #3
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c86:	2302      	movs	r3, #2
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480e      	ldr	r0, [pc, #56]	; (8001ccc <HAL_TIM_MspPostInit+0xf8>)
 8001c92:	f000 fa91 	bl	80021b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c96:	2340      	movs	r3, #64	; 0x40
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <HAL_TIM_MspPostInit+0xfc>)
 8001cb2:	f000 fa81 	bl	80021b8 <HAL_GPIO_Init>
}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <NMI_Handler+0x4>

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d20:	f000 f8f4 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET)
	{
		button = CHANGE;
	}
*/
	button = SELECT;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <EXTI0_IRQHandler+0x14>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]

//	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f000 fbf8 	bl	8002528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000118 	.word	0x20000118

08001d40 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	{
		button = CHANGE;
	}
	*/

	button = CHANGE;
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <EXTI1_IRQHandler+0x14>)
 8001d46:	2202      	movs	r2, #2
 8001d48:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	f000 fbec 	bl	8002528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000118 	.word	0x20000118

08001d58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
	*/
//	button = SELECT;
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d5c:	2080      	movs	r0, #128	; 0x80
 8001d5e:	f000 fbe3 	bl	8002528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4804      	ldr	r0, [pc, #16]	; (8001d80 <EXTI15_10_IRQHandler+0x18>)
 8001d70:	f000 fbbf 	bl	80024f2 <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d78:	f000 fbd6 	bl	8002528 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40020000 	.word	0x40020000

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f001 fcca 	bl	800374c <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20018000 	.word	0x20018000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	2000011c 	.word	0x2000011c
 8001dec:	20000270 	.word	0x20000270

08001df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e1a:	490e      	ldr	r1, [pc, #56]	; (8001e54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e20:	e002      	b.n	8001e28 <LoopCopyDataInit>

08001e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e26:	3304      	adds	r3, #4

08001e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e2c:	d3f9      	bcc.n	8001e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e30:	4c0b      	ldr	r4, [pc, #44]	; (8001e60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e34:	e001      	b.n	8001e3a <LoopFillZerobss>

08001e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e38:	3204      	adds	r2, #4

08001e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e3c:	d3fb      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e3e:	f7ff ffd7 	bl	8001df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f001 fc89 	bl	8003758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7fe fc8d 	bl	8000764 <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e58:	0800412c 	.word	0x0800412c
  ldr r2, =_sbss
 8001e5c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001e60:	2000026c 	.word	0x2000026c

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_Init+0x40>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_Init+0x40>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x40>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 f94f 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 f808 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fe3c 	bl	8001b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f967 	bl	800219e <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ee8:	f000 f92f 	bl	800214a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000010 	.word	0x20000010
 8001f04:	20000018 	.word	0x20000018
 8001f08:	20000014 	.word	0x20000014

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000018 	.word	0x20000018
 8001f30:	20000120 	.word	0x20000120

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000120 	.word	0x20000120

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f64:	d005      	beq.n	8001f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_Delay+0x44>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f72:	bf00      	nop
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8f7      	bhi.n	8001f74 <HAL_Delay+0x28>
  {
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000018 	.word	0x20000018

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4907      	ldr	r1, [pc, #28]	; (8002030 <__NVIC_EnableIRQ+0x38>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	; (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff29 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff3e 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff8e 	bl	8002088 <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff31 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa2 	bl	80020f0 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e159      	b.n	8002488 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 8148 	bne.w	8002482 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d005      	beq.n	800220a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002206:	2b02      	cmp	r3, #2
 8002208:	d130      	bne.n	800226c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0201 	and.w	r2, r3, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b03      	cmp	r3, #3
 8002276:	d017      	beq.n	80022a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d123      	bne.n	80022fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	69b9      	ldr	r1, [r7, #24]
 80022f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0203 	and.w	r2, r3, #3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a2 	beq.w	8002482 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	4b57      	ldr	r3, [pc, #348]	; (80024a0 <HAL_GPIO_Init+0x2e8>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a56      	ldr	r2, [pc, #344]	; (80024a0 <HAL_GPIO_Init+0x2e8>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <HAL_GPIO_Init+0x2e8>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800235a:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_GPIO_Init+0x2ec>)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a49      	ldr	r2, [pc, #292]	; (80024a8 <HAL_GPIO_Init+0x2f0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x202>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a48      	ldr	r2, [pc, #288]	; (80024ac <HAL_GPIO_Init+0x2f4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x1fe>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a47      	ldr	r2, [pc, #284]	; (80024b0 <HAL_GPIO_Init+0x2f8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x1fa>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a46      	ldr	r2, [pc, #280]	; (80024b4 <HAL_GPIO_Init+0x2fc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x1f6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a45      	ldr	r2, [pc, #276]	; (80024b8 <HAL_GPIO_Init+0x300>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x1f2>
 80023a6:	2304      	movs	r3, #4
 80023a8:	e008      	b.n	80023bc <HAL_GPIO_Init+0x204>
 80023aa:	2307      	movs	r3, #7
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x204>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e004      	b.n	80023bc <HAL_GPIO_Init+0x204>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_Init+0x204>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x204>
 80023ba:	2300      	movs	r3, #0
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	f002 0203 	and.w	r2, r2, #3
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	4093      	lsls	r3, r2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023cc:	4935      	ldr	r1, [pc, #212]	; (80024a4 <HAL_GPIO_Init+0x2ec>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_GPIO_Init+0x304>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fe:	4a2f      	ldr	r2, [pc, #188]	; (80024bc <HAL_GPIO_Init+0x304>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_GPIO_Init+0x304>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <HAL_GPIO_Init+0x304>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_GPIO_Init+0x304>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002452:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_GPIO_Init+0x304>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_GPIO_Init+0x304>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247c:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_GPIO_Init+0x304>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b0f      	cmp	r3, #15
 800248c:	f67f aea2 	bls.w	80021d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40013c00 	.word	0x40013c00

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024dc:	e003      	b.n	80024e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	041a      	lsls	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002504:	887a      	ldrh	r2, [r7, #2]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4013      	ands	r3, r2
 800250a:	041a      	lsls	r2, r3, #16
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43d9      	mvns	r1, r3
 8002510:	887b      	ldrh	r3, [r7, #2]
 8002512:	400b      	ands	r3, r1
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	619a      	str	r2, [r3, #24]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800253e:	4a05      	ldr	r2, [pc, #20]	; (8002554 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f806 	bl	8002558 <HAL_GPIO_EXTI_Callback>
  }
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40013c00 	.word	0x40013c00

08002558 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e267      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d075      	beq.n	800267a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258e:	4b88      	ldr	r3, [pc, #544]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b04      	cmp	r3, #4
 8002598:	d00c      	beq.n	80025b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259a:	4b85      	ldr	r3, [pc, #532]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d112      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a6:	4b82      	ldr	r3, [pc, #520]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b2:	d10b      	bne.n	80025cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	4b7e      	ldr	r3, [pc, #504]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d05b      	beq.n	8002678 <HAL_RCC_OscConfig+0x108>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d157      	bne.n	8002678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e242      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d106      	bne.n	80025e4 <HAL_RCC_OscConfig+0x74>
 80025d6:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a75      	ldr	r2, [pc, #468]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e01d      	b.n	8002620 <HAL_RCC_OscConfig+0xb0>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x98>
 80025ee:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6f      	ldr	r2, [pc, #444]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b6d      	ldr	r3, [pc, #436]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a6c      	ldr	r2, [pc, #432]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0xb0>
 8002608:	4b69      	ldr	r3, [pc, #420]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a68      	ldr	r2, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a65      	ldr	r2, [pc, #404]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7ff fc84 	bl	8001f34 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002630:	f7ff fc80 	bl	8001f34 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e207      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0xc0>
 800264e:	e014      	b.n	800267a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff fc70 	bl	8001f34 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002658:	f7ff fc6c 	bl	8001f34 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1f3      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	4b51      	ldr	r3, [pc, #324]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0xe8>
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002686:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269a:	2b08      	cmp	r3, #8
 800269c:	d11c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269e:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d116      	bne.n	80026d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_RCC_OscConfig+0x152>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e1c7      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4937      	ldr	r1, [pc, #220]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	e03a      	b.n	800274e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e0:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <HAL_RCC_OscConfig+0x244>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7ff fc25 	bl	8001f34 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ee:	f7ff fc21 	bl	8001f34 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1a8      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4925      	ldr	r1, [pc, #148]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
 8002720:	e015      	b.n	800274e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCC_OscConfig+0x244>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7ff fc04 	bl	8001f34 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002730:	f7ff fc00 	bl	8001f34 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e187      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d036      	beq.n	80027c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_RCC_OscConfig+0x248>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7ff fbe4 	bl	8001f34 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002770:	f7ff fbe0 	bl	8001f34 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e167      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_OscConfig+0x240>)
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x200>
 800278e:	e01b      	b.n	80027c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_OscConfig+0x248>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7ff fbcd 	bl	8001f34 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	e00e      	b.n	80027bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279e:	f7ff fbc9 	bl	8001f34 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d907      	bls.n	80027bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e150      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
 80027b0:	40023800 	.word	0x40023800
 80027b4:	42470000 	.word	0x42470000
 80027b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ea      	bne.n	800279e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8097 	beq.w	8002904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027da:	4b81      	ldr	r3, [pc, #516]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b7d      	ldr	r3, [pc, #500]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a7c      	ldr	r2, [pc, #496]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	4b77      	ldr	r3, [pc, #476]	; (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002812:	4b74      	ldr	r3, [pc, #464]	; (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a73      	ldr	r2, [pc, #460]	; (80029e4 <HAL_RCC_OscConfig+0x474>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281e:	f7ff fb89 	bl	8001f34 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002826:	f7ff fb85 	bl	8001f34 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e10c      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	4b6a      	ldr	r3, [pc, #424]	; (80029e4 <HAL_RCC_OscConfig+0x474>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x2ea>
 800284c:	4b64      	ldr	r3, [pc, #400]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a63      	ldr	r2, [pc, #396]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
 8002858:	e01c      	b.n	8002894 <HAL_RCC_OscConfig+0x324>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b05      	cmp	r3, #5
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x30c>
 8002862:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	4a5e      	ldr	r2, [pc, #376]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	6713      	str	r3, [r2, #112]	; 0x70
 800286e:	4b5c      	ldr	r3, [pc, #368]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	4a5b      	ldr	r2, [pc, #364]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6713      	str	r3, [r2, #112]	; 0x70
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0x324>
 800287c:	4b58      	ldr	r3, [pc, #352]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a57      	ldr	r2, [pc, #348]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
 8002888:	4b55      	ldr	r3, [pc, #340]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	4a54      	ldr	r2, [pc, #336]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 800288e:	f023 0304 	bic.w	r3, r3, #4
 8002892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d015      	beq.n	80028c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7ff fb4a 	bl	8001f34 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7ff fb46 	bl	8001f34 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e0cb      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	4b49      	ldr	r3, [pc, #292]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0ee      	beq.n	80028a4 <HAL_RCC_OscConfig+0x334>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c8:	f7ff fb34 	bl	8001f34 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7ff fb30 	bl	8001f34 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0b5      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ee      	bne.n	80028d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a38      	ldr	r2, [pc, #224]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80028fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a1 	beq.w	8002a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b08      	cmp	r3, #8
 8002918:	d05c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d141      	bne.n	80029a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002922:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCC_OscConfig+0x478>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fb04 	bl	8001f34 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002930:	f7ff fb00 	bl	8001f34 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e087      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	019b      	lsls	r3, r3, #6
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	3b01      	subs	r3, #1
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	491b      	ldr	r1, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x478>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7ff fad9 	bl	8001f34 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002986:	f7ff fad5 	bl	8001f34 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e05c      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x416>
 80029a4:	e054      	b.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_RCC_OscConfig+0x478>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7ff fac2 	bl	8001f34 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b4:	f7ff fabe 	bl	8001f34 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e045      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x444>
 80029d2:	e03d      	b.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e038      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_RCC_OscConfig+0x4ec>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d028      	beq.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d121      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d11a      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d111      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	085b      	lsrs	r3, r3, #1
 8002a34:	3b01      	subs	r3, #1
 8002a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0cc      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d90c      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b63      	ldr	r3, [pc, #396]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b8      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a58      	ldr	r2, [pc, #352]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	494d      	ldr	r1, [pc, #308]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d044      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d119      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e067      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4934      	ldr	r1, [pc, #208]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7ff f9f0 	bl	8001f34 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7ff f9ec 	bl	8001f34 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e04f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d20c      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e032      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4916      	ldr	r1, [pc, #88]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	490e      	ldr	r1, [pc, #56]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002be6:	f000 f821 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	490a      	ldr	r1, [pc, #40]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	5ccb      	ldrb	r3, [r1, r3]
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f950 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023c00 	.word	0x40023c00
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	080040d8 	.word	0x080040d8
 8002c24:	20000010 	.word	0x20000010
 8002c28:	20000014 	.word	0x20000014

08002c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c30:	b094      	sub	sp, #80	; 0x50
 8002c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
 8002c38:	2300      	movs	r3, #0
 8002c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c44:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d00d      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x40>
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	f200 80e1 	bhi.w	8002e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c5e:	e0db      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b73      	ldr	r3, [pc, #460]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c64:	e0db      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c66:	4b73      	ldr	r3, [pc, #460]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c6a:	e0d8      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c76:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d063      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c82:	4b6a      	ldr	r3, [pc, #424]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	099b      	lsrs	r3, r3, #6
 8002c88:	2200      	movs	r2, #0
 8002c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
 8002c96:	2300      	movs	r3, #0
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	462b      	mov	r3, r5
 8002ca2:	f04f 0000 	mov.w	r0, #0
 8002ca6:	f04f 0100 	mov.w	r1, #0
 8002caa:	0159      	lsls	r1, r3, #5
 8002cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb0:	0150      	lsls	r0, r2, #5
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	1a51      	subs	r1, r2, r1
 8002cba:	6139      	str	r1, [r7, #16]
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cd0:	4659      	mov	r1, fp
 8002cd2:	018b      	lsls	r3, r1, #6
 8002cd4:	4651      	mov	r1, sl
 8002cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cda:	4651      	mov	r1, sl
 8002cdc:	018a      	lsls	r2, r1, #6
 8002cde:	4651      	mov	r1, sl
 8002ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ce4:	4659      	mov	r1, fp
 8002ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cfe:	4690      	mov	r8, r2
 8002d00:	4699      	mov	r9, r3
 8002d02:	4623      	mov	r3, r4
 8002d04:	eb18 0303 	adds.w	r3, r8, r3
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	462b      	mov	r3, r5
 8002d0c:	eb49 0303 	adc.w	r3, r9, r3
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d1e:	4629      	mov	r1, r5
 8002d20:	024b      	lsls	r3, r1, #9
 8002d22:	4621      	mov	r1, r4
 8002d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d28:	4621      	mov	r1, r4
 8002d2a:	024a      	lsls	r2, r1, #9
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d32:	2200      	movs	r2, #0
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d3c:	f7fd faa0 	bl	8000280 <__aeabi_uldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4613      	mov	r3, r2
 8002d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d48:	e058      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4a:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	2200      	movs	r2, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	4611      	mov	r1, r2
 8002d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d64:	4642      	mov	r2, r8
 8002d66:	464b      	mov	r3, r9
 8002d68:	f04f 0000 	mov.w	r0, #0
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	0159      	lsls	r1, r3, #5
 8002d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d76:	0150      	lsls	r0, r2, #5
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d82:	4649      	mov	r1, r9
 8002d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002da0:	eb63 050b 	sbc.w	r5, r3, fp
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	00eb      	lsls	r3, r5, #3
 8002dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002db2:	00e2      	lsls	r2, r4, #3
 8002db4:	4614      	mov	r4, r2
 8002db6:	461d      	mov	r5, r3
 8002db8:	4643      	mov	r3, r8
 8002dba:	18e3      	adds	r3, r4, r3
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	eb45 0303 	adc.w	r3, r5, r3
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	028b      	lsls	r3, r1, #10
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ddc:	4621      	mov	r1, r4
 8002dde:	028a      	lsls	r2, r1, #10
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de6:	2200      	movs	r2, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	61fa      	str	r2, [r7, #28]
 8002dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df0:	f7fd fa46 	bl	8000280 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4613      	mov	r3, r2
 8002dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	3301      	adds	r3, #1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e16:	e002      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3750      	adds	r7, #80	; 0x50
 8002e24:	46bd      	mov	sp, r7
 8002e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	00f42400 	.word	0x00f42400
 8002e34:	007a1200 	.word	0x007a1200

08002e38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e041      	b.n	8002ece <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fe82 	bl	8001b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 f9a0 	bl	80031bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_TIM_PWM_Start+0x24>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e022      	b.n	8002f42 <HAL_TIM_PWM_Start+0x6a>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d109      	bne.n	8002f16 <HAL_TIM_PWM_Start+0x3e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	bf14      	ite	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	2300      	moveq	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	e015      	b.n	8002f42 <HAL_TIM_PWM_Start+0x6a>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d109      	bne.n	8002f30 <HAL_TIM_PWM_Start+0x58>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	bf14      	ite	ne
 8002f28:	2301      	movne	r3, #1
 8002f2a:	2300      	moveq	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	e008      	b.n	8002f42 <HAL_TIM_PWM_Start+0x6a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e068      	b.n	800301c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_PWM_Start+0x82>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f58:	e013      	b.n	8002f82 <HAL_TIM_PWM_Start+0xaa>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_PWM_Start+0x92>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f68:	e00b      	b.n	8002f82 <HAL_TIM_PWM_Start+0xaa>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_PWM_Start+0xa2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f78:	e003      	b.n	8002f82 <HAL_TIM_PWM_Start+0xaa>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fb22 	bl	80035d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a23      	ldr	r2, [pc, #140]	; (8003024 <HAL_TIM_PWM_Start+0x14c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d107      	bne.n	8002faa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <HAL_TIM_PWM_Start+0x14c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d018      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0x10e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d013      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0x10e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a19      	ldr	r2, [pc, #100]	; (8003028 <HAL_TIM_PWM_Start+0x150>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0x10e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_TIM_PWM_Start+0x154>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0x10e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a16      	ldr	r2, [pc, #88]	; (8003030 <HAL_TIM_PWM_Start+0x158>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0x10e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_TIM_PWM_Start+0x15c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d111      	bne.n	800300a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b06      	cmp	r3, #6
 8002ff6:	d010      	beq.n	800301a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003008:	e007      	b.n	800301a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40010000 	.word	0x40010000
 8003028:	40000400 	.word	0x40000400
 800302c:	40000800 	.word	0x40000800
 8003030:	40000c00 	.word	0x40000c00
 8003034:	40014000 	.word	0x40014000

08003038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003052:	2302      	movs	r3, #2
 8003054:	e0ae      	b.n	80031b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b0c      	cmp	r3, #12
 8003062:	f200 809f 	bhi.w	80031a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003066:	a201      	add	r2, pc, #4	; (adr r2, 800306c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080031a5 	.word	0x080031a5
 8003074:	080031a5 	.word	0x080031a5
 8003078:	080031a5 	.word	0x080031a5
 800307c:	080030e1 	.word	0x080030e1
 8003080:	080031a5 	.word	0x080031a5
 8003084:	080031a5 	.word	0x080031a5
 8003088:	080031a5 	.word	0x080031a5
 800308c:	08003123 	.word	0x08003123
 8003090:	080031a5 	.word	0x080031a5
 8003094:	080031a5 	.word	0x080031a5
 8003098:	080031a5 	.word	0x080031a5
 800309c:	08003163 	.word	0x08003163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f908 	bl	80032bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0208 	orr.w	r2, r2, #8
 80030ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0204 	bic.w	r2, r2, #4
 80030ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6999      	ldr	r1, [r3, #24]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	619a      	str	r2, [r3, #24]
      break;
 80030de:	e064      	b.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f94e 	bl	8003388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6999      	ldr	r1, [r3, #24]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	021a      	lsls	r2, r3, #8
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	619a      	str	r2, [r3, #24]
      break;
 8003120:	e043      	b.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f999 	bl	8003460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0208 	orr.w	r2, r2, #8
 800313c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0204 	bic.w	r2, r2, #4
 800314c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69d9      	ldr	r1, [r3, #28]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	61da      	str	r2, [r3, #28]
      break;
 8003160:	e023      	b.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f9e3 	bl	8003534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69d9      	ldr	r1, [r3, #28]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	021a      	lsls	r2, r3, #8
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	61da      	str	r2, [r3, #28]
      break;
 80031a2:	e002      	b.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
      break;
 80031a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a34      	ldr	r2, [pc, #208]	; (80032a0 <TIM_Base_SetConfig+0xe4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00f      	beq.n	80031f4 <TIM_Base_SetConfig+0x38>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031da:	d00b      	beq.n	80031f4 <TIM_Base_SetConfig+0x38>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <TIM_Base_SetConfig+0xe8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <TIM_Base_SetConfig+0x38>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a30      	ldr	r2, [pc, #192]	; (80032a8 <TIM_Base_SetConfig+0xec>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_Base_SetConfig+0x38>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <TIM_Base_SetConfig+0xf0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d108      	bne.n	8003206 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a25      	ldr	r2, [pc, #148]	; (80032a0 <TIM_Base_SetConfig+0xe4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01b      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d017      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <TIM_Base_SetConfig+0xe8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <TIM_Base_SetConfig+0xec>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00f      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a20      	ldr	r2, [pc, #128]	; (80032ac <TIM_Base_SetConfig+0xf0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1f      	ldr	r2, [pc, #124]	; (80032b0 <TIM_Base_SetConfig+0xf4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <TIM_Base_SetConfig+0xf8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_Base_SetConfig+0x8a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <TIM_Base_SetConfig+0xfc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d108      	bne.n	8003258 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <TIM_Base_SetConfig+0xe4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d103      	bne.n	800328c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	615a      	str	r2, [r3, #20]
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40010000 	.word	0x40010000
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40014000 	.word	0x40014000
 80032b4:	40014400 	.word	0x40014400
 80032b8:	40014800 	.word	0x40014800

080032bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0302 	bic.w	r3, r3, #2
 8003304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <TIM_OC1_SetConfig+0xc8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d10c      	bne.n	8003332 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0308 	bic.w	r3, r3, #8
 800331e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a13      	ldr	r2, [pc, #76]	; (8003384 <TIM_OC1_SetConfig+0xc8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d111      	bne.n	800335e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	621a      	str	r2, [r3, #32]
}
 8003378:	bf00      	nop
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40010000 	.word	0x40010000

08003388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f023 0210 	bic.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0320 	bic.w	r3, r3, #32
 80033d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	; (800345c <TIM_OC2_SetConfig+0xd4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10d      	bne.n	8003404 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003402:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a15      	ldr	r2, [pc, #84]	; (800345c <TIM_OC2_SetConfig+0xd4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d113      	bne.n	8003434 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800341a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000

08003460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <TIM_OC3_SetConfig+0xd0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d10d      	bne.n	80034da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a14      	ldr	r2, [pc, #80]	; (8003530 <TIM_OC3_SetConfig+0xd0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d113      	bne.n	800350a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	621a      	str	r2, [r3, #32]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40010000 	.word	0x40010000

08003534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800357e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	031b      	lsls	r3, r3, #12
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a10      	ldr	r2, [pc, #64]	; (80035d0 <TIM_OC4_SetConfig+0x9c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d109      	bne.n	80035a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800359a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000

080035d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2201      	movs	r2, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	401a      	ands	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003634:	2302      	movs	r3, #2
 8003636:	e050      	b.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003684:	d013      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10c      	bne.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40000c00 	.word	0x40000c00
 80036f8:	40014000 	.word	0x40014000

080036fc <siprintf>:
 80036fc:	b40e      	push	{r1, r2, r3}
 80036fe:	b500      	push	{lr}
 8003700:	b09c      	sub	sp, #112	; 0x70
 8003702:	ab1d      	add	r3, sp, #116	; 0x74
 8003704:	9002      	str	r0, [sp, #8]
 8003706:	9006      	str	r0, [sp, #24]
 8003708:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800370c:	4809      	ldr	r0, [pc, #36]	; (8003734 <siprintf+0x38>)
 800370e:	9107      	str	r1, [sp, #28]
 8003710:	9104      	str	r1, [sp, #16]
 8003712:	4909      	ldr	r1, [pc, #36]	; (8003738 <siprintf+0x3c>)
 8003714:	f853 2b04 	ldr.w	r2, [r3], #4
 8003718:	9105      	str	r1, [sp, #20]
 800371a:	6800      	ldr	r0, [r0, #0]
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	a902      	add	r1, sp, #8
 8003720:	f000 f99a 	bl	8003a58 <_svfiprintf_r>
 8003724:	9b02      	ldr	r3, [sp, #8]
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	b01c      	add	sp, #112	; 0x70
 800372c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003730:	b003      	add	sp, #12
 8003732:	4770      	bx	lr
 8003734:	20000068 	.word	0x20000068
 8003738:	ffff0208 	.word	0xffff0208

0800373c <memset>:
 800373c:	4402      	add	r2, r0
 800373e:	4603      	mov	r3, r0
 8003740:	4293      	cmp	r3, r2
 8003742:	d100      	bne.n	8003746 <memset+0xa>
 8003744:	4770      	bx	lr
 8003746:	f803 1b01 	strb.w	r1, [r3], #1
 800374a:	e7f9      	b.n	8003740 <memset+0x4>

0800374c <__errno>:
 800374c:	4b01      	ldr	r3, [pc, #4]	; (8003754 <__errno+0x8>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000068 	.word	0x20000068

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4d0d      	ldr	r5, [pc, #52]	; (8003790 <__libc_init_array+0x38>)
 800375c:	4c0d      	ldr	r4, [pc, #52]	; (8003794 <__libc_init_array+0x3c>)
 800375e:	1b64      	subs	r4, r4, r5
 8003760:	10a4      	asrs	r4, r4, #2
 8003762:	2600      	movs	r6, #0
 8003764:	42a6      	cmp	r6, r4
 8003766:	d109      	bne.n	800377c <__libc_init_array+0x24>
 8003768:	4d0b      	ldr	r5, [pc, #44]	; (8003798 <__libc_init_array+0x40>)
 800376a:	4c0c      	ldr	r4, [pc, #48]	; (800379c <__libc_init_array+0x44>)
 800376c:	f000 fc72 	bl	8004054 <_init>
 8003770:	1b64      	subs	r4, r4, r5
 8003772:	10a4      	asrs	r4, r4, #2
 8003774:	2600      	movs	r6, #0
 8003776:	42a6      	cmp	r6, r4
 8003778:	d105      	bne.n	8003786 <__libc_init_array+0x2e>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003780:	4798      	blx	r3
 8003782:	3601      	adds	r6, #1
 8003784:	e7ee      	b.n	8003764 <__libc_init_array+0xc>
 8003786:	f855 3b04 	ldr.w	r3, [r5], #4
 800378a:	4798      	blx	r3
 800378c:	3601      	adds	r6, #1
 800378e:	e7f2      	b.n	8003776 <__libc_init_array+0x1e>
 8003790:	08004124 	.word	0x08004124
 8003794:	08004124 	.word	0x08004124
 8003798:	08004124 	.word	0x08004124
 800379c:	08004128 	.word	0x08004128

080037a0 <__retarget_lock_acquire_recursive>:
 80037a0:	4770      	bx	lr

080037a2 <__retarget_lock_release_recursive>:
 80037a2:	4770      	bx	lr

080037a4 <strcpy>:
 80037a4:	4603      	mov	r3, r0
 80037a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037aa:	f803 2b01 	strb.w	r2, [r3], #1
 80037ae:	2a00      	cmp	r2, #0
 80037b0:	d1f9      	bne.n	80037a6 <strcpy+0x2>
 80037b2:	4770      	bx	lr

080037b4 <_free_r>:
 80037b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037b6:	2900      	cmp	r1, #0
 80037b8:	d044      	beq.n	8003844 <_free_r+0x90>
 80037ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037be:	9001      	str	r0, [sp, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f1a1 0404 	sub.w	r4, r1, #4
 80037c6:	bfb8      	it	lt
 80037c8:	18e4      	addlt	r4, r4, r3
 80037ca:	f000 f8df 	bl	800398c <__malloc_lock>
 80037ce:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <_free_r+0x94>)
 80037d0:	9801      	ldr	r0, [sp, #4]
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	b933      	cbnz	r3, 80037e4 <_free_r+0x30>
 80037d6:	6063      	str	r3, [r4, #4]
 80037d8:	6014      	str	r4, [r2, #0]
 80037da:	b003      	add	sp, #12
 80037dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037e0:	f000 b8da 	b.w	8003998 <__malloc_unlock>
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	d908      	bls.n	80037fa <_free_r+0x46>
 80037e8:	6825      	ldr	r5, [r4, #0]
 80037ea:	1961      	adds	r1, r4, r5
 80037ec:	428b      	cmp	r3, r1
 80037ee:	bf01      	itttt	eq
 80037f0:	6819      	ldreq	r1, [r3, #0]
 80037f2:	685b      	ldreq	r3, [r3, #4]
 80037f4:	1949      	addeq	r1, r1, r5
 80037f6:	6021      	streq	r1, [r4, #0]
 80037f8:	e7ed      	b.n	80037d6 <_free_r+0x22>
 80037fa:	461a      	mov	r2, r3
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	b10b      	cbz	r3, 8003804 <_free_r+0x50>
 8003800:	42a3      	cmp	r3, r4
 8003802:	d9fa      	bls.n	80037fa <_free_r+0x46>
 8003804:	6811      	ldr	r1, [r2, #0]
 8003806:	1855      	adds	r5, r2, r1
 8003808:	42a5      	cmp	r5, r4
 800380a:	d10b      	bne.n	8003824 <_free_r+0x70>
 800380c:	6824      	ldr	r4, [r4, #0]
 800380e:	4421      	add	r1, r4
 8003810:	1854      	adds	r4, r2, r1
 8003812:	42a3      	cmp	r3, r4
 8003814:	6011      	str	r1, [r2, #0]
 8003816:	d1e0      	bne.n	80037da <_free_r+0x26>
 8003818:	681c      	ldr	r4, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	6053      	str	r3, [r2, #4]
 800381e:	440c      	add	r4, r1
 8003820:	6014      	str	r4, [r2, #0]
 8003822:	e7da      	b.n	80037da <_free_r+0x26>
 8003824:	d902      	bls.n	800382c <_free_r+0x78>
 8003826:	230c      	movs	r3, #12
 8003828:	6003      	str	r3, [r0, #0]
 800382a:	e7d6      	b.n	80037da <_free_r+0x26>
 800382c:	6825      	ldr	r5, [r4, #0]
 800382e:	1961      	adds	r1, r4, r5
 8003830:	428b      	cmp	r3, r1
 8003832:	bf04      	itt	eq
 8003834:	6819      	ldreq	r1, [r3, #0]
 8003836:	685b      	ldreq	r3, [r3, #4]
 8003838:	6063      	str	r3, [r4, #4]
 800383a:	bf04      	itt	eq
 800383c:	1949      	addeq	r1, r1, r5
 800383e:	6021      	streq	r1, [r4, #0]
 8003840:	6054      	str	r4, [r2, #4]
 8003842:	e7ca      	b.n	80037da <_free_r+0x26>
 8003844:	b003      	add	sp, #12
 8003846:	bd30      	pop	{r4, r5, pc}
 8003848:	20000264 	.word	0x20000264

0800384c <sbrk_aligned>:
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	4e0e      	ldr	r6, [pc, #56]	; (8003888 <sbrk_aligned+0x3c>)
 8003850:	460c      	mov	r4, r1
 8003852:	6831      	ldr	r1, [r6, #0]
 8003854:	4605      	mov	r5, r0
 8003856:	b911      	cbnz	r1, 800385e <sbrk_aligned+0x12>
 8003858:	f000 fba6 	bl	8003fa8 <_sbrk_r>
 800385c:	6030      	str	r0, [r6, #0]
 800385e:	4621      	mov	r1, r4
 8003860:	4628      	mov	r0, r5
 8003862:	f000 fba1 	bl	8003fa8 <_sbrk_r>
 8003866:	1c43      	adds	r3, r0, #1
 8003868:	d00a      	beq.n	8003880 <sbrk_aligned+0x34>
 800386a:	1cc4      	adds	r4, r0, #3
 800386c:	f024 0403 	bic.w	r4, r4, #3
 8003870:	42a0      	cmp	r0, r4
 8003872:	d007      	beq.n	8003884 <sbrk_aligned+0x38>
 8003874:	1a21      	subs	r1, r4, r0
 8003876:	4628      	mov	r0, r5
 8003878:	f000 fb96 	bl	8003fa8 <_sbrk_r>
 800387c:	3001      	adds	r0, #1
 800387e:	d101      	bne.n	8003884 <sbrk_aligned+0x38>
 8003880:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003884:	4620      	mov	r0, r4
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	20000268 	.word	0x20000268

0800388c <_malloc_r>:
 800388c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003890:	1ccd      	adds	r5, r1, #3
 8003892:	f025 0503 	bic.w	r5, r5, #3
 8003896:	3508      	adds	r5, #8
 8003898:	2d0c      	cmp	r5, #12
 800389a:	bf38      	it	cc
 800389c:	250c      	movcc	r5, #12
 800389e:	2d00      	cmp	r5, #0
 80038a0:	4607      	mov	r7, r0
 80038a2:	db01      	blt.n	80038a8 <_malloc_r+0x1c>
 80038a4:	42a9      	cmp	r1, r5
 80038a6:	d905      	bls.n	80038b4 <_malloc_r+0x28>
 80038a8:	230c      	movs	r3, #12
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	2600      	movs	r6, #0
 80038ae:	4630      	mov	r0, r6
 80038b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003988 <_malloc_r+0xfc>
 80038b8:	f000 f868 	bl	800398c <__malloc_lock>
 80038bc:	f8d8 3000 	ldr.w	r3, [r8]
 80038c0:	461c      	mov	r4, r3
 80038c2:	bb5c      	cbnz	r4, 800391c <_malloc_r+0x90>
 80038c4:	4629      	mov	r1, r5
 80038c6:	4638      	mov	r0, r7
 80038c8:	f7ff ffc0 	bl	800384c <sbrk_aligned>
 80038cc:	1c43      	adds	r3, r0, #1
 80038ce:	4604      	mov	r4, r0
 80038d0:	d155      	bne.n	800397e <_malloc_r+0xf2>
 80038d2:	f8d8 4000 	ldr.w	r4, [r8]
 80038d6:	4626      	mov	r6, r4
 80038d8:	2e00      	cmp	r6, #0
 80038da:	d145      	bne.n	8003968 <_malloc_r+0xdc>
 80038dc:	2c00      	cmp	r4, #0
 80038de:	d048      	beq.n	8003972 <_malloc_r+0xe6>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	4631      	mov	r1, r6
 80038e4:	4638      	mov	r0, r7
 80038e6:	eb04 0903 	add.w	r9, r4, r3
 80038ea:	f000 fb5d 	bl	8003fa8 <_sbrk_r>
 80038ee:	4581      	cmp	r9, r0
 80038f0:	d13f      	bne.n	8003972 <_malloc_r+0xe6>
 80038f2:	6821      	ldr	r1, [r4, #0]
 80038f4:	1a6d      	subs	r5, r5, r1
 80038f6:	4629      	mov	r1, r5
 80038f8:	4638      	mov	r0, r7
 80038fa:	f7ff ffa7 	bl	800384c <sbrk_aligned>
 80038fe:	3001      	adds	r0, #1
 8003900:	d037      	beq.n	8003972 <_malloc_r+0xe6>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	442b      	add	r3, r5
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	f8d8 3000 	ldr.w	r3, [r8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d038      	beq.n	8003982 <_malloc_r+0xf6>
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	42a2      	cmp	r2, r4
 8003914:	d12b      	bne.n	800396e <_malloc_r+0xe2>
 8003916:	2200      	movs	r2, #0
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	e00f      	b.n	800393c <_malloc_r+0xb0>
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	1b52      	subs	r2, r2, r5
 8003920:	d41f      	bmi.n	8003962 <_malloc_r+0xd6>
 8003922:	2a0b      	cmp	r2, #11
 8003924:	d917      	bls.n	8003956 <_malloc_r+0xca>
 8003926:	1961      	adds	r1, r4, r5
 8003928:	42a3      	cmp	r3, r4
 800392a:	6025      	str	r5, [r4, #0]
 800392c:	bf18      	it	ne
 800392e:	6059      	strne	r1, [r3, #4]
 8003930:	6863      	ldr	r3, [r4, #4]
 8003932:	bf08      	it	eq
 8003934:	f8c8 1000 	streq.w	r1, [r8]
 8003938:	5162      	str	r2, [r4, r5]
 800393a:	604b      	str	r3, [r1, #4]
 800393c:	4638      	mov	r0, r7
 800393e:	f104 060b 	add.w	r6, r4, #11
 8003942:	f000 f829 	bl	8003998 <__malloc_unlock>
 8003946:	f026 0607 	bic.w	r6, r6, #7
 800394a:	1d23      	adds	r3, r4, #4
 800394c:	1af2      	subs	r2, r6, r3
 800394e:	d0ae      	beq.n	80038ae <_malloc_r+0x22>
 8003950:	1b9b      	subs	r3, r3, r6
 8003952:	50a3      	str	r3, [r4, r2]
 8003954:	e7ab      	b.n	80038ae <_malloc_r+0x22>
 8003956:	42a3      	cmp	r3, r4
 8003958:	6862      	ldr	r2, [r4, #4]
 800395a:	d1dd      	bne.n	8003918 <_malloc_r+0x8c>
 800395c:	f8c8 2000 	str.w	r2, [r8]
 8003960:	e7ec      	b.n	800393c <_malloc_r+0xb0>
 8003962:	4623      	mov	r3, r4
 8003964:	6864      	ldr	r4, [r4, #4]
 8003966:	e7ac      	b.n	80038c2 <_malloc_r+0x36>
 8003968:	4634      	mov	r4, r6
 800396a:	6876      	ldr	r6, [r6, #4]
 800396c:	e7b4      	b.n	80038d8 <_malloc_r+0x4c>
 800396e:	4613      	mov	r3, r2
 8003970:	e7cc      	b.n	800390c <_malloc_r+0x80>
 8003972:	230c      	movs	r3, #12
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4638      	mov	r0, r7
 8003978:	f000 f80e 	bl	8003998 <__malloc_unlock>
 800397c:	e797      	b.n	80038ae <_malloc_r+0x22>
 800397e:	6025      	str	r5, [r4, #0]
 8003980:	e7dc      	b.n	800393c <_malloc_r+0xb0>
 8003982:	605b      	str	r3, [r3, #4]
 8003984:	deff      	udf	#255	; 0xff
 8003986:	bf00      	nop
 8003988:	20000264 	.word	0x20000264

0800398c <__malloc_lock>:
 800398c:	4801      	ldr	r0, [pc, #4]	; (8003994 <__malloc_lock+0x8>)
 800398e:	f7ff bf07 	b.w	80037a0 <__retarget_lock_acquire_recursive>
 8003992:	bf00      	nop
 8003994:	20000260 	.word	0x20000260

08003998 <__malloc_unlock>:
 8003998:	4801      	ldr	r0, [pc, #4]	; (80039a0 <__malloc_unlock+0x8>)
 800399a:	f7ff bf02 	b.w	80037a2 <__retarget_lock_release_recursive>
 800399e:	bf00      	nop
 80039a0:	20000260 	.word	0x20000260

080039a4 <__ssputs_r>:
 80039a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a8:	688e      	ldr	r6, [r1, #8]
 80039aa:	461f      	mov	r7, r3
 80039ac:	42be      	cmp	r6, r7
 80039ae:	680b      	ldr	r3, [r1, #0]
 80039b0:	4682      	mov	sl, r0
 80039b2:	460c      	mov	r4, r1
 80039b4:	4690      	mov	r8, r2
 80039b6:	d82c      	bhi.n	8003a12 <__ssputs_r+0x6e>
 80039b8:	898a      	ldrh	r2, [r1, #12]
 80039ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039be:	d026      	beq.n	8003a0e <__ssputs_r+0x6a>
 80039c0:	6965      	ldr	r5, [r4, #20]
 80039c2:	6909      	ldr	r1, [r1, #16]
 80039c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039c8:	eba3 0901 	sub.w	r9, r3, r1
 80039cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039d0:	1c7b      	adds	r3, r7, #1
 80039d2:	444b      	add	r3, r9
 80039d4:	106d      	asrs	r5, r5, #1
 80039d6:	429d      	cmp	r5, r3
 80039d8:	bf38      	it	cc
 80039da:	461d      	movcc	r5, r3
 80039dc:	0553      	lsls	r3, r2, #21
 80039de:	d527      	bpl.n	8003a30 <__ssputs_r+0x8c>
 80039e0:	4629      	mov	r1, r5
 80039e2:	f7ff ff53 	bl	800388c <_malloc_r>
 80039e6:	4606      	mov	r6, r0
 80039e8:	b360      	cbz	r0, 8003a44 <__ssputs_r+0xa0>
 80039ea:	6921      	ldr	r1, [r4, #16]
 80039ec:	464a      	mov	r2, r9
 80039ee:	f000 faeb 	bl	8003fc8 <memcpy>
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fc:	81a3      	strh	r3, [r4, #12]
 80039fe:	6126      	str	r6, [r4, #16]
 8003a00:	6165      	str	r5, [r4, #20]
 8003a02:	444e      	add	r6, r9
 8003a04:	eba5 0509 	sub.w	r5, r5, r9
 8003a08:	6026      	str	r6, [r4, #0]
 8003a0a:	60a5      	str	r5, [r4, #8]
 8003a0c:	463e      	mov	r6, r7
 8003a0e:	42be      	cmp	r6, r7
 8003a10:	d900      	bls.n	8003a14 <__ssputs_r+0x70>
 8003a12:	463e      	mov	r6, r7
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	4632      	mov	r2, r6
 8003a18:	4641      	mov	r1, r8
 8003a1a:	f000 faab 	bl	8003f74 <memmove>
 8003a1e:	68a3      	ldr	r3, [r4, #8]
 8003a20:	1b9b      	subs	r3, r3, r6
 8003a22:	60a3      	str	r3, [r4, #8]
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	4433      	add	r3, r6
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a30:	462a      	mov	r2, r5
 8003a32:	f000 fad7 	bl	8003fe4 <_realloc_r>
 8003a36:	4606      	mov	r6, r0
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d1e0      	bne.n	80039fe <__ssputs_r+0x5a>
 8003a3c:	6921      	ldr	r1, [r4, #16]
 8003a3e:	4650      	mov	r0, sl
 8003a40:	f7ff feb8 	bl	80037b4 <_free_r>
 8003a44:	230c      	movs	r3, #12
 8003a46:	f8ca 3000 	str.w	r3, [sl]
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a50:	81a3      	strh	r3, [r4, #12]
 8003a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a56:	e7e9      	b.n	8003a2c <__ssputs_r+0x88>

08003a58 <_svfiprintf_r>:
 8003a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	4698      	mov	r8, r3
 8003a5e:	898b      	ldrh	r3, [r1, #12]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	b09d      	sub	sp, #116	; 0x74
 8003a64:	4607      	mov	r7, r0
 8003a66:	460d      	mov	r5, r1
 8003a68:	4614      	mov	r4, r2
 8003a6a:	d50e      	bpl.n	8003a8a <_svfiprintf_r+0x32>
 8003a6c:	690b      	ldr	r3, [r1, #16]
 8003a6e:	b963      	cbnz	r3, 8003a8a <_svfiprintf_r+0x32>
 8003a70:	2140      	movs	r1, #64	; 0x40
 8003a72:	f7ff ff0b 	bl	800388c <_malloc_r>
 8003a76:	6028      	str	r0, [r5, #0]
 8003a78:	6128      	str	r0, [r5, #16]
 8003a7a:	b920      	cbnz	r0, 8003a86 <_svfiprintf_r+0x2e>
 8003a7c:	230c      	movs	r3, #12
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a84:	e0d0      	b.n	8003c28 <_svfiprintf_r+0x1d0>
 8003a86:	2340      	movs	r3, #64	; 0x40
 8003a88:	616b      	str	r3, [r5, #20]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8e:	2320      	movs	r3, #32
 8003a90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a98:	2330      	movs	r3, #48	; 0x30
 8003a9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c40 <_svfiprintf_r+0x1e8>
 8003a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aa2:	f04f 0901 	mov.w	r9, #1
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	469a      	mov	sl, r3
 8003aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aae:	b10a      	cbz	r2, 8003ab4 <_svfiprintf_r+0x5c>
 8003ab0:	2a25      	cmp	r2, #37	; 0x25
 8003ab2:	d1f9      	bne.n	8003aa8 <_svfiprintf_r+0x50>
 8003ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ab8:	d00b      	beq.n	8003ad2 <_svfiprintf_r+0x7a>
 8003aba:	465b      	mov	r3, fp
 8003abc:	4622      	mov	r2, r4
 8003abe:	4629      	mov	r1, r5
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	f7ff ff6f 	bl	80039a4 <__ssputs_r>
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	f000 80a9 	beq.w	8003c1e <_svfiprintf_r+0x1c6>
 8003acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ace:	445a      	add	r2, fp
 8003ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80a1 	beq.w	8003c1e <_svfiprintf_r+0x1c6>
 8003adc:	2300      	movs	r3, #0
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ae6:	f10a 0a01 	add.w	sl, sl, #1
 8003aea:	9304      	str	r3, [sp, #16]
 8003aec:	9307      	str	r3, [sp, #28]
 8003aee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003af2:	931a      	str	r3, [sp, #104]	; 0x68
 8003af4:	4654      	mov	r4, sl
 8003af6:	2205      	movs	r2, #5
 8003af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afc:	4850      	ldr	r0, [pc, #320]	; (8003c40 <_svfiprintf_r+0x1e8>)
 8003afe:	f7fc fb6f 	bl	80001e0 <memchr>
 8003b02:	9a04      	ldr	r2, [sp, #16]
 8003b04:	b9d8      	cbnz	r0, 8003b3e <_svfiprintf_r+0xe6>
 8003b06:	06d0      	lsls	r0, r2, #27
 8003b08:	bf44      	itt	mi
 8003b0a:	2320      	movmi	r3, #32
 8003b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b10:	0711      	lsls	r1, r2, #28
 8003b12:	bf44      	itt	mi
 8003b14:	232b      	movmi	r3, #43	; 0x2b
 8003b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b20:	d015      	beq.n	8003b4e <_svfiprintf_r+0xf6>
 8003b22:	9a07      	ldr	r2, [sp, #28]
 8003b24:	4654      	mov	r4, sl
 8003b26:	2000      	movs	r0, #0
 8003b28:	f04f 0c0a 	mov.w	ip, #10
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b32:	3b30      	subs	r3, #48	; 0x30
 8003b34:	2b09      	cmp	r3, #9
 8003b36:	d94d      	bls.n	8003bd4 <_svfiprintf_r+0x17c>
 8003b38:	b1b0      	cbz	r0, 8003b68 <_svfiprintf_r+0x110>
 8003b3a:	9207      	str	r2, [sp, #28]
 8003b3c:	e014      	b.n	8003b68 <_svfiprintf_r+0x110>
 8003b3e:	eba0 0308 	sub.w	r3, r0, r8
 8003b42:	fa09 f303 	lsl.w	r3, r9, r3
 8003b46:	4313      	orrs	r3, r2
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	46a2      	mov	sl, r4
 8003b4c:	e7d2      	b.n	8003af4 <_svfiprintf_r+0x9c>
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	1d19      	adds	r1, r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	9103      	str	r1, [sp, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bfbb      	ittet	lt
 8003b5a:	425b      	neglt	r3, r3
 8003b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b60:	9307      	strge	r3, [sp, #28]
 8003b62:	9307      	strlt	r3, [sp, #28]
 8003b64:	bfb8      	it	lt
 8003b66:	9204      	strlt	r2, [sp, #16]
 8003b68:	7823      	ldrb	r3, [r4, #0]
 8003b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b6c:	d10c      	bne.n	8003b88 <_svfiprintf_r+0x130>
 8003b6e:	7863      	ldrb	r3, [r4, #1]
 8003b70:	2b2a      	cmp	r3, #42	; 0x2a
 8003b72:	d134      	bne.n	8003bde <_svfiprintf_r+0x186>
 8003b74:	9b03      	ldr	r3, [sp, #12]
 8003b76:	1d1a      	adds	r2, r3, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	9203      	str	r2, [sp, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bfb8      	it	lt
 8003b80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b84:	3402      	adds	r4, #2
 8003b86:	9305      	str	r3, [sp, #20]
 8003b88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003c50 <_svfiprintf_r+0x1f8>
 8003b8c:	7821      	ldrb	r1, [r4, #0]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	4650      	mov	r0, sl
 8003b92:	f7fc fb25 	bl	80001e0 <memchr>
 8003b96:	b138      	cbz	r0, 8003ba8 <_svfiprintf_r+0x150>
 8003b98:	9b04      	ldr	r3, [sp, #16]
 8003b9a:	eba0 000a 	sub.w	r0, r0, sl
 8003b9e:	2240      	movs	r2, #64	; 0x40
 8003ba0:	4082      	lsls	r2, r0
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	3401      	adds	r4, #1
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bac:	4825      	ldr	r0, [pc, #148]	; (8003c44 <_svfiprintf_r+0x1ec>)
 8003bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bb2:	2206      	movs	r2, #6
 8003bb4:	f7fc fb14 	bl	80001e0 <memchr>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d038      	beq.n	8003c2e <_svfiprintf_r+0x1d6>
 8003bbc:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <_svfiprintf_r+0x1f0>)
 8003bbe:	bb1b      	cbnz	r3, 8003c08 <_svfiprintf_r+0x1b0>
 8003bc0:	9b03      	ldr	r3, [sp, #12]
 8003bc2:	3307      	adds	r3, #7
 8003bc4:	f023 0307 	bic.w	r3, r3, #7
 8003bc8:	3308      	adds	r3, #8
 8003bca:	9303      	str	r3, [sp, #12]
 8003bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bce:	4433      	add	r3, r6
 8003bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd2:	e768      	b.n	8003aa6 <_svfiprintf_r+0x4e>
 8003bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bd8:	460c      	mov	r4, r1
 8003bda:	2001      	movs	r0, #1
 8003bdc:	e7a6      	b.n	8003b2c <_svfiprintf_r+0xd4>
 8003bde:	2300      	movs	r3, #0
 8003be0:	3401      	adds	r4, #1
 8003be2:	9305      	str	r3, [sp, #20]
 8003be4:	4619      	mov	r1, r3
 8003be6:	f04f 0c0a 	mov.w	ip, #10
 8003bea:	4620      	mov	r0, r4
 8003bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bf0:	3a30      	subs	r2, #48	; 0x30
 8003bf2:	2a09      	cmp	r2, #9
 8003bf4:	d903      	bls.n	8003bfe <_svfiprintf_r+0x1a6>
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0c6      	beq.n	8003b88 <_svfiprintf_r+0x130>
 8003bfa:	9105      	str	r1, [sp, #20]
 8003bfc:	e7c4      	b.n	8003b88 <_svfiprintf_r+0x130>
 8003bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c02:	4604      	mov	r4, r0
 8003c04:	2301      	movs	r3, #1
 8003c06:	e7f0      	b.n	8003bea <_svfiprintf_r+0x192>
 8003c08:	ab03      	add	r3, sp, #12
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	462a      	mov	r2, r5
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <_svfiprintf_r+0x1f4>)
 8003c10:	a904      	add	r1, sp, #16
 8003c12:	4638      	mov	r0, r7
 8003c14:	f3af 8000 	nop.w
 8003c18:	1c42      	adds	r2, r0, #1
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	d1d6      	bne.n	8003bcc <_svfiprintf_r+0x174>
 8003c1e:	89ab      	ldrh	r3, [r5, #12]
 8003c20:	065b      	lsls	r3, r3, #25
 8003c22:	f53f af2d 	bmi.w	8003a80 <_svfiprintf_r+0x28>
 8003c26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c28:	b01d      	add	sp, #116	; 0x74
 8003c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2e:	ab03      	add	r3, sp, #12
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	462a      	mov	r2, r5
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <_svfiprintf_r+0x1f4>)
 8003c36:	a904      	add	r1, sp, #16
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f000 f879 	bl	8003d30 <_printf_i>
 8003c3e:	e7eb      	b.n	8003c18 <_svfiprintf_r+0x1c0>
 8003c40:	080040e8 	.word	0x080040e8
 8003c44:	080040f2 	.word	0x080040f2
 8003c48:	00000000 	.word	0x00000000
 8003c4c:	080039a5 	.word	0x080039a5
 8003c50:	080040ee 	.word	0x080040ee

08003c54 <_printf_common>:
 8003c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c58:	4616      	mov	r6, r2
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	688a      	ldr	r2, [r1, #8]
 8003c5e:	690b      	ldr	r3, [r1, #16]
 8003c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bfb8      	it	lt
 8003c68:	4613      	movlt	r3, r2
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c70:	4607      	mov	r7, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	b10a      	cbz	r2, 8003c7a <_printf_common+0x26>
 8003c76:	3301      	adds	r3, #1
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	0699      	lsls	r1, r3, #26
 8003c7e:	bf42      	ittt	mi
 8003c80:	6833      	ldrmi	r3, [r6, #0]
 8003c82:	3302      	addmi	r3, #2
 8003c84:	6033      	strmi	r3, [r6, #0]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	f015 0506 	ands.w	r5, r5, #6
 8003c8c:	d106      	bne.n	8003c9c <_printf_common+0x48>
 8003c8e:	f104 0a19 	add.w	sl, r4, #25
 8003c92:	68e3      	ldr	r3, [r4, #12]
 8003c94:	6832      	ldr	r2, [r6, #0]
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	42ab      	cmp	r3, r5
 8003c9a:	dc26      	bgt.n	8003cea <_printf_common+0x96>
 8003c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ca0:	1e13      	subs	r3, r2, #0
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	bf18      	it	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	0692      	lsls	r2, r2, #26
 8003caa:	d42b      	bmi.n	8003d04 <_printf_common+0xb0>
 8003cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	4638      	mov	r0, r7
 8003cb4:	47c0      	blx	r8
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d01e      	beq.n	8003cf8 <_printf_common+0xa4>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	6922      	ldr	r2, [r4, #16]
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	bf02      	ittt	eq
 8003cc6:	68e5      	ldreq	r5, [r4, #12]
 8003cc8:	6833      	ldreq	r3, [r6, #0]
 8003cca:	1aed      	subeq	r5, r5, r3
 8003ccc:	68a3      	ldr	r3, [r4, #8]
 8003cce:	bf0c      	ite	eq
 8003cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd4:	2500      	movne	r5, #0
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	bfc4      	itt	gt
 8003cda:	1a9b      	subgt	r3, r3, r2
 8003cdc:	18ed      	addgt	r5, r5, r3
 8003cde:	2600      	movs	r6, #0
 8003ce0:	341a      	adds	r4, #26
 8003ce2:	42b5      	cmp	r5, r6
 8003ce4:	d11a      	bne.n	8003d1c <_printf_common+0xc8>
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e008      	b.n	8003cfc <_printf_common+0xa8>
 8003cea:	2301      	movs	r3, #1
 8003cec:	4652      	mov	r2, sl
 8003cee:	4649      	mov	r1, r9
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	47c0      	blx	r8
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d103      	bne.n	8003d00 <_printf_common+0xac>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d00:	3501      	adds	r5, #1
 8003d02:	e7c6      	b.n	8003c92 <_printf_common+0x3e>
 8003d04:	18e1      	adds	r1, r4, r3
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	2030      	movs	r0, #48	; 0x30
 8003d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d0e:	4422      	add	r2, r4
 8003d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d18:	3302      	adds	r3, #2
 8003d1a:	e7c7      	b.n	8003cac <_printf_common+0x58>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4622      	mov	r2, r4
 8003d20:	4649      	mov	r1, r9
 8003d22:	4638      	mov	r0, r7
 8003d24:	47c0      	blx	r8
 8003d26:	3001      	adds	r0, #1
 8003d28:	d0e6      	beq.n	8003cf8 <_printf_common+0xa4>
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7d9      	b.n	8003ce2 <_printf_common+0x8e>
	...

08003d30 <_printf_i>:
 8003d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	7e0f      	ldrb	r7, [r1, #24]
 8003d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d38:	2f78      	cmp	r7, #120	; 0x78
 8003d3a:	4691      	mov	r9, r2
 8003d3c:	4680      	mov	r8, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	469a      	mov	sl, r3
 8003d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d46:	d807      	bhi.n	8003d58 <_printf_i+0x28>
 8003d48:	2f62      	cmp	r7, #98	; 0x62
 8003d4a:	d80a      	bhi.n	8003d62 <_printf_i+0x32>
 8003d4c:	2f00      	cmp	r7, #0
 8003d4e:	f000 80d4 	beq.w	8003efa <_printf_i+0x1ca>
 8003d52:	2f58      	cmp	r7, #88	; 0x58
 8003d54:	f000 80c0 	beq.w	8003ed8 <_printf_i+0x1a8>
 8003d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d60:	e03a      	b.n	8003dd8 <_printf_i+0xa8>
 8003d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d66:	2b15      	cmp	r3, #21
 8003d68:	d8f6      	bhi.n	8003d58 <_printf_i+0x28>
 8003d6a:	a101      	add	r1, pc, #4	; (adr r1, 8003d70 <_printf_i+0x40>)
 8003d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d70:	08003dc9 	.word	0x08003dc9
 8003d74:	08003ddd 	.word	0x08003ddd
 8003d78:	08003d59 	.word	0x08003d59
 8003d7c:	08003d59 	.word	0x08003d59
 8003d80:	08003d59 	.word	0x08003d59
 8003d84:	08003d59 	.word	0x08003d59
 8003d88:	08003ddd 	.word	0x08003ddd
 8003d8c:	08003d59 	.word	0x08003d59
 8003d90:	08003d59 	.word	0x08003d59
 8003d94:	08003d59 	.word	0x08003d59
 8003d98:	08003d59 	.word	0x08003d59
 8003d9c:	08003ee1 	.word	0x08003ee1
 8003da0:	08003e09 	.word	0x08003e09
 8003da4:	08003e9b 	.word	0x08003e9b
 8003da8:	08003d59 	.word	0x08003d59
 8003dac:	08003d59 	.word	0x08003d59
 8003db0:	08003f03 	.word	0x08003f03
 8003db4:	08003d59 	.word	0x08003d59
 8003db8:	08003e09 	.word	0x08003e09
 8003dbc:	08003d59 	.word	0x08003d59
 8003dc0:	08003d59 	.word	0x08003d59
 8003dc4:	08003ea3 	.word	0x08003ea3
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	602a      	str	r2, [r5, #0]
 8003dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e09f      	b.n	8003f1c <_printf_i+0x1ec>
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	682b      	ldr	r3, [r5, #0]
 8003de0:	0607      	lsls	r7, r0, #24
 8003de2:	f103 0104 	add.w	r1, r3, #4
 8003de6:	6029      	str	r1, [r5, #0]
 8003de8:	d501      	bpl.n	8003dee <_printf_i+0xbe>
 8003dea:	681e      	ldr	r6, [r3, #0]
 8003dec:	e003      	b.n	8003df6 <_printf_i+0xc6>
 8003dee:	0646      	lsls	r6, r0, #25
 8003df0:	d5fb      	bpl.n	8003dea <_printf_i+0xba>
 8003df2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003df6:	2e00      	cmp	r6, #0
 8003df8:	da03      	bge.n	8003e02 <_printf_i+0xd2>
 8003dfa:	232d      	movs	r3, #45	; 0x2d
 8003dfc:	4276      	negs	r6, r6
 8003dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e02:	485a      	ldr	r0, [pc, #360]	; (8003f6c <_printf_i+0x23c>)
 8003e04:	230a      	movs	r3, #10
 8003e06:	e012      	b.n	8003e2e <_printf_i+0xfe>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	1d19      	adds	r1, r3, #4
 8003e0e:	6029      	str	r1, [r5, #0]
 8003e10:	0605      	lsls	r5, r0, #24
 8003e12:	d501      	bpl.n	8003e18 <_printf_i+0xe8>
 8003e14:	681e      	ldr	r6, [r3, #0]
 8003e16:	e002      	b.n	8003e1e <_printf_i+0xee>
 8003e18:	0641      	lsls	r1, r0, #25
 8003e1a:	d5fb      	bpl.n	8003e14 <_printf_i+0xe4>
 8003e1c:	881e      	ldrh	r6, [r3, #0]
 8003e1e:	4853      	ldr	r0, [pc, #332]	; (8003f6c <_printf_i+0x23c>)
 8003e20:	2f6f      	cmp	r7, #111	; 0x6f
 8003e22:	bf0c      	ite	eq
 8003e24:	2308      	moveq	r3, #8
 8003e26:	230a      	movne	r3, #10
 8003e28:	2100      	movs	r1, #0
 8003e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e2e:	6865      	ldr	r5, [r4, #4]
 8003e30:	60a5      	str	r5, [r4, #8]
 8003e32:	2d00      	cmp	r5, #0
 8003e34:	bfa2      	ittt	ge
 8003e36:	6821      	ldrge	r1, [r4, #0]
 8003e38:	f021 0104 	bicge.w	r1, r1, #4
 8003e3c:	6021      	strge	r1, [r4, #0]
 8003e3e:	b90e      	cbnz	r6, 8003e44 <_printf_i+0x114>
 8003e40:	2d00      	cmp	r5, #0
 8003e42:	d04b      	beq.n	8003edc <_printf_i+0x1ac>
 8003e44:	4615      	mov	r5, r2
 8003e46:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e4a:	fb03 6711 	mls	r7, r3, r1, r6
 8003e4e:	5dc7      	ldrb	r7, [r0, r7]
 8003e50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e54:	4637      	mov	r7, r6
 8003e56:	42bb      	cmp	r3, r7
 8003e58:	460e      	mov	r6, r1
 8003e5a:	d9f4      	bls.n	8003e46 <_printf_i+0x116>
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d10b      	bne.n	8003e78 <_printf_i+0x148>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	07de      	lsls	r6, r3, #31
 8003e64:	d508      	bpl.n	8003e78 <_printf_i+0x148>
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	6861      	ldr	r1, [r4, #4]
 8003e6a:	4299      	cmp	r1, r3
 8003e6c:	bfde      	ittt	le
 8003e6e:	2330      	movle	r3, #48	; 0x30
 8003e70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e78:	1b52      	subs	r2, r2, r5
 8003e7a:	6122      	str	r2, [r4, #16]
 8003e7c:	f8cd a000 	str.w	sl, [sp]
 8003e80:	464b      	mov	r3, r9
 8003e82:	aa03      	add	r2, sp, #12
 8003e84:	4621      	mov	r1, r4
 8003e86:	4640      	mov	r0, r8
 8003e88:	f7ff fee4 	bl	8003c54 <_printf_common>
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d14a      	bne.n	8003f26 <_printf_i+0x1f6>
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e94:	b004      	add	sp, #16
 8003e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	f043 0320 	orr.w	r3, r3, #32
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	4833      	ldr	r0, [pc, #204]	; (8003f70 <_printf_i+0x240>)
 8003ea4:	2778      	movs	r7, #120	; 0x78
 8003ea6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	6829      	ldr	r1, [r5, #0]
 8003eae:	061f      	lsls	r7, r3, #24
 8003eb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003eb4:	d402      	bmi.n	8003ebc <_printf_i+0x18c>
 8003eb6:	065f      	lsls	r7, r3, #25
 8003eb8:	bf48      	it	mi
 8003eba:	b2b6      	uxthmi	r6, r6
 8003ebc:	07df      	lsls	r7, r3, #31
 8003ebe:	bf48      	it	mi
 8003ec0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ec4:	6029      	str	r1, [r5, #0]
 8003ec6:	bf48      	it	mi
 8003ec8:	6023      	strmi	r3, [r4, #0]
 8003eca:	b91e      	cbnz	r6, 8003ed4 <_printf_i+0x1a4>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	f023 0320 	bic.w	r3, r3, #32
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	e7a7      	b.n	8003e28 <_printf_i+0xf8>
 8003ed8:	4824      	ldr	r0, [pc, #144]	; (8003f6c <_printf_i+0x23c>)
 8003eda:	e7e4      	b.n	8003ea6 <_printf_i+0x176>
 8003edc:	4615      	mov	r5, r2
 8003ede:	e7bd      	b.n	8003e5c <_printf_i+0x12c>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	6826      	ldr	r6, [r4, #0]
 8003ee4:	6961      	ldr	r1, [r4, #20]
 8003ee6:	1d18      	adds	r0, r3, #4
 8003ee8:	6028      	str	r0, [r5, #0]
 8003eea:	0635      	lsls	r5, r6, #24
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	d501      	bpl.n	8003ef4 <_printf_i+0x1c4>
 8003ef0:	6019      	str	r1, [r3, #0]
 8003ef2:	e002      	b.n	8003efa <_printf_i+0x1ca>
 8003ef4:	0670      	lsls	r0, r6, #25
 8003ef6:	d5fb      	bpl.n	8003ef0 <_printf_i+0x1c0>
 8003ef8:	8019      	strh	r1, [r3, #0]
 8003efa:	2300      	movs	r3, #0
 8003efc:	6123      	str	r3, [r4, #16]
 8003efe:	4615      	mov	r5, r2
 8003f00:	e7bc      	b.n	8003e7c <_printf_i+0x14c>
 8003f02:	682b      	ldr	r3, [r5, #0]
 8003f04:	1d1a      	adds	r2, r3, #4
 8003f06:	602a      	str	r2, [r5, #0]
 8003f08:	681d      	ldr	r5, [r3, #0]
 8003f0a:	6862      	ldr	r2, [r4, #4]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f7fc f966 	bl	80001e0 <memchr>
 8003f14:	b108      	cbz	r0, 8003f1a <_printf_i+0x1ea>
 8003f16:	1b40      	subs	r0, r0, r5
 8003f18:	6060      	str	r0, [r4, #4]
 8003f1a:	6863      	ldr	r3, [r4, #4]
 8003f1c:	6123      	str	r3, [r4, #16]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f24:	e7aa      	b.n	8003e7c <_printf_i+0x14c>
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	462a      	mov	r2, r5
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	4640      	mov	r0, r8
 8003f2e:	47d0      	blx	sl
 8003f30:	3001      	adds	r0, #1
 8003f32:	d0ad      	beq.n	8003e90 <_printf_i+0x160>
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	079b      	lsls	r3, r3, #30
 8003f38:	d413      	bmi.n	8003f62 <_printf_i+0x232>
 8003f3a:	68e0      	ldr	r0, [r4, #12]
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	4298      	cmp	r0, r3
 8003f40:	bfb8      	it	lt
 8003f42:	4618      	movlt	r0, r3
 8003f44:	e7a6      	b.n	8003e94 <_printf_i+0x164>
 8003f46:	2301      	movs	r3, #1
 8003f48:	4632      	mov	r2, r6
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	47d0      	blx	sl
 8003f50:	3001      	adds	r0, #1
 8003f52:	d09d      	beq.n	8003e90 <_printf_i+0x160>
 8003f54:	3501      	adds	r5, #1
 8003f56:	68e3      	ldr	r3, [r4, #12]
 8003f58:	9903      	ldr	r1, [sp, #12]
 8003f5a:	1a5b      	subs	r3, r3, r1
 8003f5c:	42ab      	cmp	r3, r5
 8003f5e:	dcf2      	bgt.n	8003f46 <_printf_i+0x216>
 8003f60:	e7eb      	b.n	8003f3a <_printf_i+0x20a>
 8003f62:	2500      	movs	r5, #0
 8003f64:	f104 0619 	add.w	r6, r4, #25
 8003f68:	e7f5      	b.n	8003f56 <_printf_i+0x226>
 8003f6a:	bf00      	nop
 8003f6c:	080040f9 	.word	0x080040f9
 8003f70:	0800410a 	.word	0x0800410a

08003f74 <memmove>:
 8003f74:	4288      	cmp	r0, r1
 8003f76:	b510      	push	{r4, lr}
 8003f78:	eb01 0402 	add.w	r4, r1, r2
 8003f7c:	d902      	bls.n	8003f84 <memmove+0x10>
 8003f7e:	4284      	cmp	r4, r0
 8003f80:	4623      	mov	r3, r4
 8003f82:	d807      	bhi.n	8003f94 <memmove+0x20>
 8003f84:	1e43      	subs	r3, r0, #1
 8003f86:	42a1      	cmp	r1, r4
 8003f88:	d008      	beq.n	8003f9c <memmove+0x28>
 8003f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f92:	e7f8      	b.n	8003f86 <memmove+0x12>
 8003f94:	4402      	add	r2, r0
 8003f96:	4601      	mov	r1, r0
 8003f98:	428a      	cmp	r2, r1
 8003f9a:	d100      	bne.n	8003f9e <memmove+0x2a>
 8003f9c:	bd10      	pop	{r4, pc}
 8003f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fa6:	e7f7      	b.n	8003f98 <memmove+0x24>

08003fa8 <_sbrk_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	4d06      	ldr	r5, [pc, #24]	; (8003fc4 <_sbrk_r+0x1c>)
 8003fac:	2300      	movs	r3, #0
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	602b      	str	r3, [r5, #0]
 8003fb4:	f7fd fee6 	bl	8001d84 <_sbrk>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_sbrk_r+0x1a>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_sbrk_r+0x1a>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	2000025c 	.word	0x2000025c

08003fc8 <memcpy>:
 8003fc8:	440a      	add	r2, r1
 8003fca:	4291      	cmp	r1, r2
 8003fcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003fd0:	d100      	bne.n	8003fd4 <memcpy+0xc>
 8003fd2:	4770      	bx	lr
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fde:	4291      	cmp	r1, r2
 8003fe0:	d1f9      	bne.n	8003fd6 <memcpy+0xe>
 8003fe2:	bd10      	pop	{r4, pc}

08003fe4 <_realloc_r>:
 8003fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe8:	4680      	mov	r8, r0
 8003fea:	4614      	mov	r4, r2
 8003fec:	460e      	mov	r6, r1
 8003fee:	b921      	cbnz	r1, 8003ffa <_realloc_r+0x16>
 8003ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	f7ff bc49 	b.w	800388c <_malloc_r>
 8003ffa:	b92a      	cbnz	r2, 8004008 <_realloc_r+0x24>
 8003ffc:	f7ff fbda 	bl	80037b4 <_free_r>
 8004000:	4625      	mov	r5, r4
 8004002:	4628      	mov	r0, r5
 8004004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004008:	f000 f81b 	bl	8004042 <_malloc_usable_size_r>
 800400c:	4284      	cmp	r4, r0
 800400e:	4607      	mov	r7, r0
 8004010:	d802      	bhi.n	8004018 <_realloc_r+0x34>
 8004012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004016:	d812      	bhi.n	800403e <_realloc_r+0x5a>
 8004018:	4621      	mov	r1, r4
 800401a:	4640      	mov	r0, r8
 800401c:	f7ff fc36 	bl	800388c <_malloc_r>
 8004020:	4605      	mov	r5, r0
 8004022:	2800      	cmp	r0, #0
 8004024:	d0ed      	beq.n	8004002 <_realloc_r+0x1e>
 8004026:	42bc      	cmp	r4, r7
 8004028:	4622      	mov	r2, r4
 800402a:	4631      	mov	r1, r6
 800402c:	bf28      	it	cs
 800402e:	463a      	movcs	r2, r7
 8004030:	f7ff ffca 	bl	8003fc8 <memcpy>
 8004034:	4631      	mov	r1, r6
 8004036:	4640      	mov	r0, r8
 8004038:	f7ff fbbc 	bl	80037b4 <_free_r>
 800403c:	e7e1      	b.n	8004002 <_realloc_r+0x1e>
 800403e:	4635      	mov	r5, r6
 8004040:	e7df      	b.n	8004002 <_realloc_r+0x1e>

08004042 <_malloc_usable_size_r>:
 8004042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004046:	1f18      	subs	r0, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	bfbc      	itt	lt
 800404c:	580b      	ldrlt	r3, [r1, r0]
 800404e:	18c0      	addlt	r0, r0, r3
 8004050:	4770      	bx	lr
	...

08004054 <_init>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	bf00      	nop
 8004058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405a:	bc08      	pop	{r3}
 800405c:	469e      	mov	lr, r3
 800405e:	4770      	bx	lr

08004060 <_fini>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	bf00      	nop
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr
